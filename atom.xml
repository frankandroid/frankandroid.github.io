<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Welcome</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-05-24T12:31:29.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>frankandroid</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据结构和算法学习笔记</title>
    <link href="http://yoursite.com/2017/05/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/05/24/数据结构和算法学习笔记/</id>
    <published>2017-05-24T12:31:29.000Z</published>
    <updated>2017-05-24T12:31:29.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>数据结构和算法之排序</title>
    <link href="http://yoursite.com/2017/04/22/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E4%B9%8B%E6%8E%92%E5%BA%8F/"/>
    <id>http://yoursite.com/2017/04/22/数据结构和算法之排序/</id>
    <published>2017-04-22T15:11:38.000Z</published>
    <updated>2017-04-22T15:11:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><blockquote>
<p>就是从第一个数开始依次和后面的数进行比较，大的就往后移，小的就往前移，这样第一轮比较完毕之后最大的数就在最后的位置，第二轮比较的时候，从第一个数开始，一直比较到倒数第二的位置，然后倒数第二的位置上的数字就是倒数第二大的数字了</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">   <span class="comment">/**</span></div><div class="line"> * 冒泡排序</div><div class="line"> * */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</div><div class="line">	<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length-<span class="number">1</span>; i++) &#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length - i - <span class="number">1</span>; j++) &#123;</div><div class="line">			</div><div class="line">			<span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</div><div class="line">				<span class="keyword">int</span> temp = arr[j];</div><div class="line">				arr[j] = arr[j + <span class="number">1</span>];</div><div class="line">				arr[j + <span class="number">1</span>] = temp;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		System.out.println(<span class="string">"第"</span>+(i+<span class="number">1</span>)+<span class="string">"轮排序后:"</span>);</div><div class="line">		printArray(arr);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><blockquote>
<p>从第二个位置开始依次往前找位置插入。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"> * 插入排序</div><div class="line"> * */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</div><div class="line">	<span class="comment">//从第二个数字开始</span></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</div><div class="line">		<span class="keyword">int</span> temp = arr[i];</div><div class="line">		<span class="keyword">int</span> j = i-<span class="number">1</span>;</div><div class="line">		<span class="keyword">for</span> (; j &gt;=<span class="number">0</span>; j--) &#123;</div><div class="line">			<span class="keyword">if</span> (arr[j]&gt;temp) &#123;</div><div class="line">				arr[j+<span class="number">1</span>] = arr[j];</div><div class="line">			&#125;<span class="keyword">else</span>&#123;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		arr[j+<span class="number">1</span>] = temp;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><ul>
<li>快速排序就是以最后一个数X作为分界点，</li>
<li>然后倒数第二个数Y往左开始找，找到第一个比最后一个数小的数L，</li>
<li>第一个数开始往右找，找到第一个比最后一个数大的数H，</li>
<li>如果没有交叉，那么就交换L和H的位置，</li>
<li>如果有交叉，那么就交换H和最后一个数即参照物的值。</li>
<li>这个时候左边的数都比参照物的小，右边的数都比参照物的大，然后继续递归就可以了。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line">   <span class="comment">/**</span></div><div class="line"> * </div><div class="line"> * <span class="doctag">@Description</span> :快速排序</div><div class="line"> * <span class="doctag">@param</span> data</div><div class="line"> *            数组数据</div><div class="line"> * <span class="doctag">@param</span> start</div><div class="line"> *            起始下标（最左边的小标）</div><div class="line"> * <span class="doctag">@param</span> end</div><div class="line"> *            结束下标 （最右边的下标）</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] datas, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (start &gt; end) &#123;</div><div class="line">		<span class="keyword">return</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">int</span> middle = findMiddle(datas, start, end);<span class="comment">// 找中间点</span></div><div class="line">	quickSort(datas, start, middle - <span class="number">1</span>);<span class="comment">// 左边一半</span></div><div class="line">	quickSort(datas, middle + <span class="number">1</span>, end);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * </div><div class="line"> * <span class="doctag">@param</span> data</div><div class="line"> * <span class="doctag">@param</span> start</div><div class="line"> * <span class="doctag">@param</span> end</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> * <span class="doctag">@Description</span> :寻找中间值，返回的值就是数据分界点的小标。左边的都比这个小，右边的都比这个大。</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">findMiddle</span><span class="params">(<span class="keyword">int</span>[] datas, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">int</span> middle = -<span class="number">1</span>;</div><div class="line">	<span class="comment">// 找分界点的过程</span></div><div class="line">	<span class="comment">// 1,以最后一个数据作为参照物</span></div><div class="line">	<span class="keyword">int</span> temp = datas[end];</div><div class="line">	<span class="comment">// 2,定义left和right</span></div><div class="line">	<span class="keyword">int</span> left = start;</div><div class="line">	<span class="keyword">int</span> right = end - <span class="number">1</span>;</div><div class="line">	<span class="comment">// 3,定义死循环找中间点</span></div><div class="line">	<span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">		<span class="comment">// 1,从左边往右开始找第一个比参照物大的值</span></div><div class="line">		<span class="keyword">while</span> (left &lt; end &amp;&amp; datas[left] &lt;= temp)</div><div class="line">			left++;</div><div class="line">		<span class="comment">// 跳出while循环有两个条件：1. left = end</span></div><div class="line">		<span class="comment">// 2. datas[left] &gt; temp;</span></div><div class="line">		<span class="keyword">if</span> (left == end) &#123;</div><div class="line">			<span class="comment">// 说明参照物的值是最大值</span></div><div class="line">			middle = end;</div><div class="line">			<span class="keyword">break</span>;<span class="comment">// 结束</span></div><div class="line">		&#125;</div><div class="line">		<span class="comment">// 2,从右边往左开始找第一个比参照物小的值</span></div><div class="line">		<span class="keyword">while</span> (right &gt;= start &amp;&amp; datas[right] &gt;= temp)</div><div class="line">			right--;</div><div class="line">		<span class="comment">// 跳出while循环有两个条件：1.right ==start</span></div><div class="line">		<span class="comment">// 2. datas[right] &lt; temp;</span></div><div class="line">		<span class="keyword">if</span> (right == start - <span class="number">1</span>) &#123;</div><div class="line">			<span class="comment">// 说明参照物是最小值，也算是交叉了,交给下面的代码处理</span></div><div class="line"></div><div class="line">		&#125;</div><div class="line">		<span class="comment">// 3,判断是否交叉</span></div><div class="line">		<span class="comment">// 1,没有交叉，继续找</span></div><div class="line">		<span class="comment">// 交换left和right的值。</span></div><div class="line">		<span class="keyword">if</span> (left &lt; right) &#123;</div><div class="line">			change(datas, left, right);</div><div class="line">			<span class="keyword">continue</span>;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="comment">// 2,交叉,中间点（交换left 和参照物的值）</span></div><div class="line">			<span class="comment">// left 把数据分成两半</span></div><div class="line">			change(datas, left, end);</div><div class="line">			middle = left;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> middle;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span>[] datas, <span class="keyword">int</span> from, <span class="keyword">int</span> to)</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> tem = datas[from];</div><div class="line">	datas[from] = datas[to];</div><div class="line">	datas[to] = tem;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;冒泡排序&quot;&gt;&lt;a href=&quot;#冒泡排序&quot; class=&quot;headerlink&quot; title=&quot;冒泡排序&quot;&gt;&lt;/a&gt;冒泡排序&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;就是从第一个数开始依次和后面的数进行比较，大的就往后移，小的就往前移，这样第一轮比较完毕之后最大的
    
    </summary>
    
      <category term="数据结构和算法" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构和算法" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>冒泡排序和二分查找</title>
    <link href="http://yoursite.com/2017/03/24/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E5%92%8C%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    <id>http://yoursite.com/2017/03/24/冒泡排序和二分查找/</id>
    <published>2017-03-24T03:49:43.000Z</published>
    <updated>2017-03-24T03:49:43.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">   <span class="comment">/**</span></div><div class="line"> * 冒泡排序</div><div class="line"> * */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</div><div class="line">	<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length-<span class="number">1</span>; i++) &#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length - i - <span class="number">1</span>; j++) &#123;</div><div class="line">			</div><div class="line">			<span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</div><div class="line">				<span class="keyword">int</span> temp = arr[j];</div><div class="line">				arr[j] = arr[j + <span class="number">1</span>];</div><div class="line">				arr[j + <span class="number">1</span>] = temp;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		System.out.println(<span class="string">"第"</span>+(i+<span class="number">1</span>)+<span class="string">"轮排序后:"</span>);</div><div class="line">		printArray(arr);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="二分查找（前提是数组是有序的）"><a href="#二分查找（前提是数组是有序的）" class="headerlink" title="二分查找（前提是数组是有序的）"></a>二分查找（前提是数组是有序的）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">    <span class="comment">/**</span></div><div class="line"> * 二分法查找数据</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">long</span> value)</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> middle = <span class="number">0</span>;</div><div class="line">	<span class="keyword">int</span> low = <span class="number">0</span>;</div><div class="line">	<span class="keyword">int</span> pow = elements;</div><div class="line">	</div><div class="line">	<span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</div><div class="line">		middle = (pow + low) / <span class="number">2</span>;</div><div class="line">		<span class="keyword">if</span>(arr[middle] == value) &#123;</div><div class="line">			<span class="keyword">return</span> middle;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span>(low &gt; pow) &#123;</div><div class="line">			<span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">if</span>(arr[middle] &gt; value) &#123;</div><div class="line">				pow = middle - <span class="number">1</span>;</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				low = middle + <span class="number">1</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;冒泡排序&quot;&gt;&lt;a href=&quot;#冒泡排序&quot; class=&quot;headerlink&quot; title=&quot;冒泡排序&quot;&gt;&lt;/a&gt;冒泡排序&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre
    
    </summary>
    
      <category term="数据结构和算法" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构和算法" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>使用Rxjava-Retrofit-Dagger2-Mvp构建的安卓框架(2)</title>
    <link href="http://yoursite.com/2017/02/07/%E4%BD%BF%E7%94%A8Rxjava-Retrofit-Dagger2-Mvp%E6%9E%84%E5%BB%BA%E7%9A%84%E5%AE%89%E5%8D%93%E6%A1%86%E6%9E%B6-2/"/>
    <id>http://yoursite.com/2017/02/07/使用Rxjava-Retrofit-Dagger2-Mvp构建的安卓框架-2/</id>
    <published>2017-02-07T12:28:13.000Z</published>
    <updated>2017-02-07T12:28:13.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MVP搭建"><a href="#MVP搭建" class="headerlink" title="MVP搭建"></a>MVP搭建</h1><blockquote>
<p>接着上一篇，这篇主要聊如何组织MVP中的M,V,P</p>
</blockquote>
<p>直接上代码，考虑到Presenter获取到View的数据之后，一般也不会有太多复杂的处理。所以就没有另外加入Modle.加上也不复杂。</p>
<h3 id="1-Presenter-和-View-的基类，Presenter要拥有View的实例对象，才能够调用View的方法。所以提供两个必须实现的方法。一个是让"><a href="#1-Presenter-和-View-的基类，Presenter要拥有View的实例对象，才能够调用View的方法。所以提供两个必须实现的方法。一个是让" class="headerlink" title="1. Presenter 和 View 的基类，Presenter要拥有View的实例对象，才能够调用View的方法。所以提供两个必须实现的方法。一个是让"></a>1. Presenter 和 View 的基类，Presenter要拥有View的实例对象，才能够调用View的方法。所以提供两个必须实现的方法。一个是让</h3><p>Presenter用于View的实例，另一个是为了在View销毁的时候，释放Presenter,避免内存泄漏。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IPresenter</span>&lt;<span class="title">V</span> <span class="keyword">extends</span> <span class="title">IView</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onAttachView</span><span class="params">(V view)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onDetachView</span><span class="params">(V view)</span></span>;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IView</span> </span>&#123;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-MvpActivity，MvpView的基类。获取Presenter的实例，销毁的时候，presenter作相应处理，避免内存泄漏。"><a href="#2-MvpActivity，MvpView的基类。获取Presenter的实例，销毁的时候，presenter作相应处理，避免内存泄漏。" class="headerlink" title="2. MvpActivity，MvpView的基类。获取Presenter的实例，销毁的时候，presenter作相应处理，避免内存泄漏。"></a>2. MvpActivity，MvpView的基类。获取Presenter的实例，销毁的时候，presenter作相应处理，避免内存泄漏。</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">MvpActivity</span>&lt;<span class="title">P</span> <span class="keyword">extends</span> <span class="title">IPresenter</span>&gt; <span class="keyword">extends</span> <span class="title">BaseActivity</span> <span class="keyword">implements</span> <span class="title">IView</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> P mPresenter;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        mPresenter = initPresenter();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 由子类去创建presenter</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> P <span class="title">initPresenter</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">        <span class="keyword">if</span> (mPresenter != <span class="keyword">null</span>)</div><div class="line">            mPresenter.onDetachView(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-BasaPresenter-Presenter的基类。View销毁的时候取消RxJava的注册。获取到DataManager和View对象。"><a href="#3-BasaPresenter-Presenter的基类。View销毁的时候取消RxJava的注册。获取到DataManager和View对象。" class="headerlink" title="3. BasaPresenter, Presenter的基类。View销毁的时候取消RxJava的注册。获取到DataManager和View对象。"></a>3. BasaPresenter, Presenter的基类。View销毁的时候取消RxJava的注册。获取到DataManager和View对象。</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BasePresenter</span>&lt;<span class="title">V</span> <span class="keyword">extends</span> <span class="title">IView</span>&gt; <span class="keyword">implements</span> <span class="title">IPresenter</span>&lt;<span class="title">V</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> V mView;</div><div class="line">    <span class="keyword">protected</span> DataManager mDataManager;</div><div class="line">    <span class="keyword">private</span> CompositeSubscription mCompositeSubscription;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BasePresenter</span><span class="params">(V view)</span> </span>&#123;</div><div class="line">        mDataManager = App.getInstance().getDataManager();</div><div class="line">        onAttachView(view);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAttachView</span><span class="params">(V view)</span> </span>&#123;</div><div class="line">      <span class="keyword">this</span>.mView = view;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDetachView</span><span class="params">(IView view)</span> </span>&#123;</div><div class="line">        onUnSubscribe();</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * rxJava取消注册，以避免内存泄露</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onUnSubscribe</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mCompositeSubscription != <span class="keyword">null</span> &amp;&amp; mCompositeSubscription.hasSubscriptions()) &#123;</div><div class="line">            mCompositeSubscription.unsubscribe();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**这里是统一处理observable,这样就不用在每次网络请求回来后都加上线程切换的代码*/</span></div><div class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">addSubscription</span><span class="params">(Observable&lt;T&gt; observable, Subscriber&lt;T&gt; subscriber)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mCompositeSubscription == <span class="keyword">null</span>) &#123;</div><div class="line">            mCompositeSubscription = <span class="keyword">new</span> CompositeSubscription();</div><div class="line">        &#125;</div><div class="line">        Subscription subscription = observable</div><div class="line">                .subscribeOn(Schedulers.io())</div><div class="line">                .observeOn(AndroidSchedulers.mainThread())</div><div class="line">                .subscribe(subscriber);</div><div class="line">        mCompositeSubscription.add(subscription);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="4-具体的View和Presenter的实例。"><a href="#4-具体的View和Presenter的实例。" class="headerlink" title="4. 具体的View和Presenter的实例。"></a>4. 具体的View和Presenter的实例。</h3><h4 id="沟通的桥梁"><a href="#沟通的桥梁" class="headerlink" title="沟通的桥梁"></a>沟通的桥梁</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainContact</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">View</span> <span class="keyword">extends</span> <span class="title">IView</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onGetDailyDataSuc</span><span class="params">(NewsBean newsBean)</span></span>;</div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onGetDailyDataFailed</span><span class="params">(String msg)</span></span>;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Presenter</span> <span class="keyword">extends</span> <span class="title">IPresenter</span>&lt;<span class="title">View</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">       <span class="function"><span class="keyword">void</span> <span class="title">GetDailyData</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="MainActivity"><a href="#MainActivity" class="headerlink" title="MainActivity"></a>MainActivity</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">MvpActivity</span>&lt;<span class="title">MainContact</span>.<span class="title">Presenter</span>&gt; <span class="keyword">implements</span> <span class="title">MainContact</span>.<span class="title">View</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@BindView</span>(R.id.bt)</div><div class="line">    Button mBt;</div><div class="line">    <span class="meta">@BindView</span>(R.id.tv)</div><div class="line">    TextView mTv;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        ButterKnife.bind(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> MainContact.<span class="function">Presenter <span class="title">initPresenter</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MainPresenter(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@OnClick</span>(&#123;R.id.bt&#125;)</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onButtonClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (view.getId()) &#123;</div><div class="line">            <span class="keyword">case</span> R.id.bt:</div><div class="line">                mPresenter.GetDailyData();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onGetDailyDataSuc</span><span class="params">(NewsBean newsBean)</span> </span>&#123;</div><div class="line"></div><div class="line">        mTv.setText(newsBean.toString());</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onGetDailyDataFailed</span><span class="params">(String msg)</span> </span>&#123;</div><div class="line">        Toast.makeText(<span class="keyword">this</span>, msg, Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="MainPresenter"><a href="#MainPresenter" class="headerlink" title="MainPresenter"></a>MainPresenter</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainPresenter</span> <span class="keyword">extends</span> <span class="title">BasePresenter</span>&lt;<span class="title">MainContact</span>.<span class="title">View</span>&gt; <span class="keyword">implements</span> <span class="title">MainContact</span>.<span class="title">Presenter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MainPresenter</span><span class="params">(MainContact.View view)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(view);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetDailyData</span><span class="params">()</span> </span>&#123;</div><div class="line">        Observable&lt;NewsBean&gt; newsData = mDataManager.mDailyRepository.getNewsData();</div><div class="line"></div><div class="line">        addSubscription(newsData, <span class="keyword">new</span> Subscriber&lt;NewsBean&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">                mView.onGetDailyDataFailed(e.getMessage());</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(NewsBean newsBean)</span> </span>&#123;</div><div class="line">                mView.onGetDailyDataSuc(newsBean);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>主要就是让View和Presenter之间相互引用，然后可以互调方法，加上这种设计模式之后，代码的思路，流程会清晰很多，View主要负责给用户的操作进行<br>反馈，Presenter则负责处理具体的网络请求以及逻辑等。到这里整个框架就基本上差不多了。还有一些细节有待完善。</p>
</blockquote>
<p><a href="https://github.com/frankandroid/FrameWorkSample" target="_blank" rel="external">源代码已经上传到github</a>;</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;MVP搭建&quot;&gt;&lt;a href=&quot;#MVP搭建&quot; class=&quot;headerlink&quot; title=&quot;MVP搭建&quot;&gt;&lt;/a&gt;MVP搭建&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;接着上一篇，这篇主要聊如何组织MVP中的M,V,P&lt;/p&gt;
&lt;/blockquote&gt;
&lt;
    
    </summary>
    
      <category term="项目架构" scheme="http://yoursite.com/categories/%E9%A1%B9%E7%9B%AE%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="项目架构" scheme="http://yoursite.com/tags/%E9%A1%B9%E7%9B%AE%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>使用Rxjava+Retrofit+Dagger2+Mvp构建的安卓框架（1）</title>
    <link href="http://yoursite.com/2017/02/05/%E4%BD%BF%E7%94%A8Rxjava-Retrofit-Dagger2-Mvp%E6%9E%84%E5%BB%BA%E7%9A%84%E5%AE%89%E5%8D%93%E6%A1%86%E6%9E%B6(1)/"/>
    <id>http://yoursite.com/2017/02/05/使用Rxjava-Retrofit-Dagger2-Mvp构建的安卓框架(1)/</id>
    <published>2017-02-05T11:49:20.000Z</published>
    <updated>2017-02-05T11:49:20.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="网络请求搭建"><a href="#网络请求搭建" class="headerlink" title="网络请求搭建"></a>网络请求搭建</h1><blockquote>
<p>采用这种方式搭建的项目架构，比较的解耦，要是追求更高的解耦，也可以加上mvvm，有时间的话会加上mvvm的文章。Rxjava对线程的处理非常好，<br>MVP设计模式把业务处理和用户交互分开，P负责处理业务，V负责处理和用户的交互，以及界面的展示，Dagger2的好处前面也已经说过了，就是解耦。</p>
<p>这个系列的第一篇文章主要写怎么打通网络请求这一块。</p>
</blockquote>
<h2 id="包的结构。"><a href="#包的结构。" class="headerlink" title="包的结构。"></a>包的结构。</h2><blockquote>
<p>框架的搭建主要设计分为那些模块。我们新建一个data module用于处理网络请求以及数据。项目的整体包结构是下面这个样子。<br><img src="https://i.niupic.com/images/2017/02/07/rORcUD.png"></p>
<h4 id="java"><a href="#java" class="headerlink" title="java"></a>java</h4><ol>
<li>base 一些基类。</li>
<li>di dagger2相关的类。</li>
<li>ui 各模块的类。</li>
<li>main MainActivity相关的类，一般一个模块，我们就给他建一个包。<h4 id="data"><a href="#data" class="headerlink" title="data"></a>data</h4></li>
<li>api 网络接口相关的api</li>
<li>bean 解析网络数据的实体</li>
<li>repository 网络请求的仓库。</li>
</ol>
</blockquote>
<h2 id="网络请求模块如何搭建起来。"><a href="#网络请求模块如何搭建起来。" class="headerlink" title="网络请求模块如何搭建起来。"></a>网络请求模块如何搭建起来。</h2><ul>
<li><p>网络接口api</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DailyApi</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//获取最新日报新闻列表</span></div><div class="line">    String URL_GET_LATEST_NEWS = <span class="string">"news/latest"</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取今日日报新闻列表</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> TodayNews</div><div class="line">     */</div><div class="line">    <span class="meta">@GET</span>(URL_GET_LATEST_NEWS)</div><div class="line">    <span class="function">Observable&lt;NewsBean&gt; <span class="title">getTodayNews</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>网络请求仓库</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DailyRepository</span> </span>&#123;</div><div class="line"></div><div class="line">    DailyApi mDailyApi;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DailyRepository</span><span class="params">(DailyApi dailyApi)</span> </span>&#123;</div><div class="line">        mDailyApi = dailyApi;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Observable&lt;NewsBean&gt; <span class="title">getNewsData</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mDailyApi.getTodayNews();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>网络请求需要的一些类，都由module提供。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * @创建者 frank</div><div class="line"> * @时间 2017/2/6 15:39</div><div class="line"> * @描述：$&#123;提供和网络相关的类对象&#125;</div><div class="line"> */</div><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataModule</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String BASE_URL = <span class="string">"http://news-at.zhihu.com/api/4/"</span>;</div><div class="line">    </div><div class="line">    <span class="meta">@Singleton</span></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="function"><span class="keyword">public</span> DailyRepository <span class="title">provideDailyRepository</span><span class="params">(DailyApi dailyApi)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DailyRepository(dailyApi);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Singleton</span></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="function"><span class="keyword">public</span> DailyApi <span class="title">provideDailyApi</span><span class="params">(Retrofit retrofit)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> retrofit.create(DailyApi.class);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Retrofit</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> client           OkHttpClient</div><div class="line">     * <span class="doctag">@param</span> converterFactory Converter.Factory</div><div class="line">     * <span class="doctag">@return</span> Retrofit</div><div class="line">     */</div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="meta">@Singleton</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Retrofit <span class="title">provideClientApi</span><span class="params">(OkHttpClient client, Converter.Factory converterFactory)</span> </span>&#123;</div><div class="line">        Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder()</div><div class="line">                .baseUrl(BASE_URL)</div><div class="line">                .addConverterFactory(converterFactory)</div><div class="line">                .addCallAdapterFactory(RxJavaCallAdapterFactory.create())</div><div class="line">                .client(client)</div><div class="line">                .build();</div><div class="line">        <span class="keyword">return</span> retrofit;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Gson转换器单例对象</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> gson Gson</div><div class="line">     * <span class="doctag">@return</span> Converter.Factory</div><div class="line">     */</div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="meta">@Singleton</span></div><div class="line">    <span class="keyword">public</span> Converter.<span class="function">Factory <span class="title">provideConverter</span><span class="params">(Gson gson)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> GsonConverterFactory.create(gson);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Gson 单例对象</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> Gson</div><div class="line">     */</div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="meta">@Singleton</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Gson <span class="title">provideGson</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> GsonBuilder().serializeNulls().create();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * OkHttp客户端单例对象</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> loggingInterceptor HttpLoggingInterceptor</div><div class="line">     * <span class="doctag">@return</span> OkHttpClient</div><div class="line">     */</div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="meta">@Singleton</span></div><div class="line">    <span class="function"><span class="keyword">public</span> OkHttpClient <span class="title">provideClient</span><span class="params">(HttpLoggingInterceptor loggingInterceptor)</span> </span>&#123;</div><div class="line">        OkHttpClient client = <span class="keyword">new</span> OkHttpClient.Builder()</div><div class="line">                .addInterceptor(loggingInterceptor)</div><div class="line">                .addNetworkInterceptor(<span class="keyword">new</span> StethoInterceptor())</div><div class="line">                .build();</div><div class="line">        <span class="keyword">return</span> client;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 日志拦截器单例对象,用于OkHttp层对日志进行处理</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> HttpLoggingInterceptor</div><div class="line">     */</div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="meta">@Singleton</span></div><div class="line">    <span class="function"><span class="keyword">public</span> HttpLoggingInterceptor <span class="title">provideLogger</span><span class="params">()</span> </span>&#123;</div><div class="line">        HttpLoggingInterceptor interceptor = <span class="keyword">new</span> HttpLoggingInterceptor();</div><div class="line">        interceptor.setLevel(HttpLoggingInterceptor.Level.NONE);</div><div class="line">        <span class="keyword">return</span> interceptor;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>网络请求统一的管理类，</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataManager</span> </span>&#123;</div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    <span class="keyword">public</span> DailyRepository mDailyRepository;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DataManager</span><span class="params">()</span> </span>&#123;</div><div class="line">        DaggerDataComponent.builder().dataModule(<span class="keyword">new</span> DataModule()).build().injectDataManager(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>在AppModule中提供DataManager</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123;</div><div class="line">    Application mApplication;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AppModule</span><span class="params">(Application application)</span> </span>&#123;</div><div class="line">        mApplication = application;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Singleton</span></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="function">Application <span class="title">provideApplication</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span>  mApplication;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Singleton</span></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="function">DataManager <span class="title">provideDataManager</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DataManager();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Singleton</span></div><div class="line"><span class="meta">@Component</span>(modules = AppModule.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AppComponent</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">injectApp</span><span class="params">(App app)</span></span>;</div><div class="line"></div><div class="line">    <span class="function">Application <span class="title">getApplication</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function">DataManager <span class="title">getDataManager</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>全局的application</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    <span class="keyword">static</span> DataManager mDataManager;</div><div class="line">    </div><div class="line">    AppComponent mAppComponent;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate();</div><div class="line"></div><div class="line">        mAppComponent = DaggerAppComponent.builder().appModule(<span class="keyword">new</span> AppModule(<span class="keyword">this</span>)).build();</div><div class="line">        mAppComponent.injectApp(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (BuildConfig.DEBUG) &#123;</div><div class="line">            Stetho.initialize(Stetho.newInitializerBuilder(<span class="keyword">this</span>)</div><div class="line">                    .enableDumpapp(Stetho.defaultDumperPluginsProvider(<span class="keyword">this</span>))</div><div class="line">                    .enableWebKitInspector(Stetho.defaultInspectorModulesProvider(<span class="keyword">this</span>))</div><div class="line">                    .build());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> AppComponent <span class="title">getAppComponent</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mAppComponent;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataManager <span class="title">getDataManager</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mDataManager;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>最后在presenter中获取到DataManager,然后进行网络请求。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasePresenter</span>&lt;<span class="title">V</span> <span class="keyword">extends</span> <span class="title">IView</span>&gt; <span class="keyword">implements</span> <span class="title">IPresenter</span>&lt;<span class="title">V</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> V mView;</div><div class="line">    <span class="keyword">protected</span> DataManager mDataManager;</div><div class="line">    <span class="keyword">private</span> CompositeSubscription mCompositeSubscription;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BasePresenter</span><span class="params">()</span> </span>&#123;</div><div class="line">        mDataManager = App.getDataManager();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>整个的流程是这样：在Application中注入DataManager,DataManager中拥有各个Repository的成员，然后Repository是通过DataComponent<br>注入到DataManager中的，关于网络请求需要用到的其他类，比如Retrofit,OkHttpClient,Api等，都是通过DataModule提供的，然后在presenter<br>里面拿到DataManager，就可以进行网络请求了。</p>
</blockquote>
<p><a href="https://github.com/frankandroid/FrameWorkSample" target="_blank" rel="external">源代码已经上传到github</a>;</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;网络请求搭建&quot;&gt;&lt;a href=&quot;#网络请求搭建&quot; class=&quot;headerlink&quot; title=&quot;网络请求搭建&quot;&gt;&lt;/a&gt;网络请求搭建&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;采用这种方式搭建的项目架构，比较的解耦，要是追求更高的解耦，也可以加上mvvm，有
    
    </summary>
    
      <category term="项目架构" scheme="http://yoursite.com/categories/%E9%A1%B9%E7%9B%AE%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="项目架构" scheme="http://yoursite.com/tags/%E9%A1%B9%E7%9B%AE%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>AppBarLayout的五种ScrollFlags</title>
    <link href="http://yoursite.com/2017/01/21/android_five_scrollFlags/"/>
    <id>http://yoursite.com/2017/01/21/android_five_scrollFlags/</id>
    <published>2017-01-21T04:15:58.000Z</published>
    <updated>2017-02-05T10:28:58.872Z</updated>
    
    <content type="html"><![CDATA[<h2 id="AppBarLayout的五种ScrollFlags。"><a href="#AppBarLayout的五种ScrollFlags。" class="headerlink" title="AppBarLayout的五种ScrollFlags。"></a>AppBarLayout的五种ScrollFlags。</h2><blockquote>
<p>ScrollFlags共有五种常量值供AppBarLayout的Children View使用，在xml布局文件中通过app:layout_scrollFlags设置，对应的值为：scroll，enterAlways，enterAlwaysCollapsed，snap，exitUntilCollapsed；</p>
</blockquote>
<h3 id="先上代码。"><a href="#先上代码。" class="headerlink" title="先上代码。"></a>先上代码。</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.CoordinatorLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.hhly.collapesingdemo.ScrollingActivity"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.AppBarLayout</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/app_bar"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"@dimen/app_bar_height"</span></div><div class="line">        <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme.AppBarOverlay"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">android.support.design.widget.CollapsingToolbarLayout</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/toolbar_layout"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:minHeight</span>=<span class="string">"30dp"</span></div><div class="line">            <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span></div><div class="line">            <span class="attr">app:contentScrim</span>=<span class="string">"?attr/colorPrimary"</span></div><div class="line">            <span class="attr">app:layout_scrollFlags</span>=<span class="string">"scroll"</span>&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/toolbar"</span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span></div><div class="line">                <span class="attr">app:layout_collapseMode</span>=<span class="string">"pin"</span></div><div class="line">                <span class="attr">app:popupTheme</span>=<span class="string">"@style/AppTheme.PopupOverlay"</span>/&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;/<span class="name">android.support.design.widget.CollapsingToolbarLayout</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">android.support.design.widget.AppBarLayout</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">"@layout/content_scrolling"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.FloatingActionButton</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/fab"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_margin</span>=<span class="string">"@dimen/fab_margin"</span></div><div class="line">        <span class="attr">app:layout_anchor</span>=<span class="string">"@id/app_bar"</span></div><div class="line">        <span class="attr">app:layout_anchorGravity</span>=<span class="string">"bottom|end"</span></div><div class="line">        <span class="attr">app:srcCompat</span>=<span class="string">"@android:drawable/ic_dialog_email"</span>/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">android.support.design.widget.CoordinatorLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="scroll"><a href="#scroll" class="headerlink" title="scroll"></a>scroll</h3><blockquote>
<p>Child View 伴随着滚动事件而滚出或滚进屏幕。注意两点：第一点，如果使用了其他值，必定要使用这个值才能起作用；第二点：如果在这个child View前面的任何其他Child View没有设置这个值，那么这个Child View的设置将失去作用。</p>
</blockquote>
<h3 id="enterAlways"><a href="#enterAlways" class="headerlink" title="enterAlways"></a>enterAlways</h3><blockquote>
<p>快速返回模式。其实就是向下滚动时Scrolling View和Child View之间的滚动优先级问题。对比scroll和scroll | enterAlways设置，发生向下滚动事件时，前者优先滚动Scrolling View，后者优先滚动Child View，当优先滚动的一方已经全部滚进屏幕之后，另一方才开始滚动。</p>
</blockquote>
<h3 id="enterAlwaysCollapsed"><a href="#enterAlwaysCollapsed" class="headerlink" title="enterAlwaysCollapsed"></a>enterAlwaysCollapsed</h3><blockquote>
<p>enterAlways的附加值。这里涉及到Child View的高度和最小高度，向下滚动时，Child View先向下滚动最小高度值，然后Scrolling View开始滚动，到达边界时，Child View再向下滚动，直至显示完全。</p>
</blockquote>
<p>示例代码：</p>
<pre><code>
...
android:layout_height="@dimen/dp_200"
android:minHeight="@dimen/dp_56"
...
app:layout_scrollFlags="scroll|enterAlways|enterAlwaysCollapsed"
...
</code></pre>


<h3 id="exitUntilCollapsed"><a href="#exitUntilCollapsed" class="headerlink" title="exitUntilCollapsed"></a>exitUntilCollapsed</h3><blockquote>
<p>这里也涉及到最小高度。发生向上滚动事件时，Child View向上滚动退出直至最小高度，然后Scrolling View开始滚动。也就是，Child View不会完全退出屏幕。</p>
<pre><code>
...
android:layout_height="@dimen/dp_200"
android:minHeight="@dimen/dp_56"
...
app:layout_scrollFlags="scroll|exitUntilCollapsed"
...
</code></pre>

</blockquote>
<h3 id="snap"><a href="#snap" class="headerlink" title="snap"></a>snap</h3><blockquote>
<p>就是Child View滚动比例的一个吸附效果。也就是说，Child View不会存在局部显示的情况，滚动Child View的部分高度，当我们松开手指时，Child View要么向上全部滚出屏幕，要么向下全部滚进屏幕，有点类似ViewPager的左右滑动。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;AppBarLayout的五种ScrollFlags。&quot;&gt;&lt;a href=&quot;#AppBarLayout的五种ScrollFlags。&quot; class=&quot;headerlink&quot; title=&quot;AppBarLayout的五种ScrollFlags。&quot;&gt;&lt;/a&gt;AppBa
    
    </summary>
    
      <category term="android5.0" scheme="http://yoursite.com/categories/android5-0/"/>
    
    
      <category term="android5.0" scheme="http://yoursite.com/tags/android5-0/"/>
    
  </entry>
  
  <entry>
    <title>Recycleview Adapter中出现的一个小bug</title>
    <link href="http://yoursite.com/2017/01/09/recycleview-adapter%E4%B8%AD%E5%87%BA%E7%8E%B0%E7%9A%84%E4%B8%80%E4%B8%AA%E5%B0%8Fbug/"/>
    <id>http://yoursite.com/2017/01/09/recycleview-adapter中出现的一个小bug/</id>
    <published>2017-01-09T09:47:18.000Z</published>
    <updated>2017-01-09T09:47:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RecycleViewAdapter-使用中遇到的一个小bug"><a href="#RecycleViewAdapter-使用中遇到的一个小bug" class="headerlink" title="RecycleViewAdapter 使用中遇到的一个小bug"></a>RecycleViewAdapter 使用中遇到的一个小bug</h1><p>1.先上代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RamdomNumberDialogAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">RamdomNumberDialogAdapter</span></span></div><div class="line">        .<span class="title">RedViewHolder</span>&gt; &#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> List&lt;Integer&gt; numbers = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RamdomNumberDialogAdapter</span><span class="params">(List&lt;Integer&gt; numbers)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.numbers = numbers;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> RamdomNumberDialogAdapter.<span class="function">RedViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span></span></span></div><div class="line">            viewType) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RedViewHolder(LayoutInflater.from(parent.getContext()).inflate(R.layout</div><div class="line">                .adapter_eleven_choice_five_dialog_not_choice_sphere_item, parent, <span class="keyword">false</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(RedViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line"></div><div class="line">        holder.mTextView.setText(numbers.get(position)+<span class="string">""</span>);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (position == <span class="number">6</span>) &#123;</div><div class="line">            holder.mTextView.setBackgroundResource(R.drawable.shape_double_item_bg_blue);</div><div class="line">        &#125;<span class="comment">/*else&#123;</span></div><div class="line">            holder.mTextView.setBackgroundResource(R.drawable.shape_double_item_bg_red);</div><div class="line">        &#125;*/</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">7</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</div><div class="line"></div><div class="line">        TextView mTextView;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">RedViewHolder</span><span class="params">(View itemView)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>(itemView);</div><div class="line"></div><div class="line">            mTextView = (TextView) itemView.findViewById(R.id.sphere_dialog_text);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上述代码导致的问题就是每点击一次，蓝色球就会增加一个，其实是复用导致的问题。</p>
<p><img src="https://i.niupic.com/images/2017/02/09/hR5uwu.png"><br><img src="https://i.niupic.com/images/2017/02/09/3f4DsO.png"><br><img src="https://i.niupic.com/images/2017/02/09/8YtnJA.png"></p>
<blockquote>
<p>主要就是holder复用导致的问题，之前也遇到过，现在整理一下。把注释的代码释放就好了</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(RedViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line"></div><div class="line">        holder.mTextView.setText(numbers.get(position)+<span class="string">""</span>);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (position == <span class="number">6</span>) &#123;</div><div class="line">            holder.mTextView.setBackgroundResource(R.drawable.shape_double_item_bg_blue);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            holder.mTextView.setBackgroundResource(R.drawable.shape_double_item_bg_red);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;RecycleViewAdapter-使用中遇到的一个小bug&quot;&gt;&lt;a href=&quot;#RecycleViewAdapter-使用中遇到的一个小bug&quot; class=&quot;headerlink&quot; title=&quot;RecycleViewAdapter 使用中遇到的一个小bu
    
    </summary>
    
      <category term="遇到过的小bug" scheme="http://yoursite.com/categories/%E9%81%87%E5%88%B0%E8%BF%87%E7%9A%84%E5%B0%8Fbug/"/>
    
    
      <category term="遇到过的小bug" scheme="http://yoursite.com/tags/%E9%81%87%E5%88%B0%E8%BF%87%E7%9A%84%E5%B0%8Fbug/"/>
    
  </entry>
  
  <entry>
    <title>GreenDao3.0的使用</title>
    <link href="http://yoursite.com/2016/12/09/GreenDao3-0%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2016/12/09/GreenDao3-0的使用/</id>
    <published>2016-12-09T12:25:00.000Z</published>
    <updated>2016-12-09T12:25:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>在APP开发中，经常会需要使用到数据库，用SqliteOpenHelper效率不是很高，也更麻烦，所以用GreenDao会高效一些。</p>
</blockquote>
<h2 id="1-首先在项目中导入GreenDao的库。"><a href="#1-首先在项目中导入GreenDao的库。" class="headerlink" title="1. 首先在项目中导入GreenDao的库。"></a>1. 首先在项目中导入GreenDao的库。</h2><p>在project的build.gradle中，添加插件。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">buildscript &#123;</div><div class="line">    repositories &#123;</div><div class="line">        jcenter()</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath <span class="string">'com.android.tools.build:gradle:2.2.2'</span></div><div class="line">        classpath <span class="string">'org.greenrobot:greendao-gradle-plugin:3.2.1'</span></div><div class="line">        <span class="comment">// <span class="doctag">NOTE:</span> Do not place your application dependencies here; they belong</span></div><div class="line">        <span class="comment">// in the individual module build.gradle files</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在app的buile.gradle中添加依赖，并加上greeddao的配置。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">apply plugin: <span class="string">'com.android.application'</span></div><div class="line">apply plugin: <span class="string">'org.greenrobot.greendao'</span></div><div class="line"></div><div class="line">android &#123;</div><div class="line">    compileSdkVersion <span class="number">25</span></div><div class="line">    buildToolsVersion <span class="string">"25.0.2"</span></div><div class="line">    defaultConfig &#123;</div><div class="line">        applicationId <span class="string">"com.hhly.greendaodemo"</span></div><div class="line">        minSdkVersion <span class="number">15</span></div><div class="line">        targetSdkVersion <span class="number">25</span></div><div class="line">        versionCode <span class="number">1</span></div><div class="line">        versionName <span class="string">"1.0"</span></div><div class="line">        testInstrumentationRunner <span class="string">"android.support.test.runner.AndroidJUnitRunner"</span></div><div class="line">    &#125;</div><div class="line">    buildTypes &#123;</div><div class="line">        release &#123;</div><div class="line">            <span class="function">minifyEnabled <span class="keyword">false</span></span></div><div class="line">            proguardFiles <span class="title">getDefaultProguardFile</span><span class="params">(<span class="string">'proguard-android.txt'</span>)</span>, 'proguard-rules.pro'</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    greendao &#123;</div><div class="line">        schemaVersion <span class="number">1</span></div><div class="line">        daoPackage <span class="string">'com.hhly.greendaodemo.gen'</span></div><div class="line">        targetGenDir <span class="string">'src/main/java'</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    <span class="function">compile <span class="title">fileTree</span><span class="params">(dir: <span class="string">'libs'</span>, include: [<span class="string">'*.jar'</span>])</span></span></div><div class="line">    <span class="title">androidTestCompile</span><span class="params">(<span class="string">'com.android.support.test.espresso:espresso-core:2.2.2'</span>, &#123;</span></div><div class="line">        exclude group: <span class="string">'com.android.support'</span>, <span class="keyword">module</span>: <span class="string">'support-annotations'</span></div><div class="line">    &#125;)</div><div class="line">    compile 'com.android.support:appcompat-v7:25.1.0'</div><div class="line">    testCompile 'junit:junit:4.12'</div><div class="line">    compile 'org.greenrobot:greendao:3.2.0'</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>schemaVersion： 表示的数据库schema的版本号：在升级数据库或者数据迁移的时候需要改变这个值，只要每次都+1就行；<br> daoPackage： dao的包名，包名默认是entity所在的包；<br> targetGenDir : 自动生成的数据库文件的目录。</p>
</blockquote>
<p>如果上面不指定目录的话，数据库文件就会生成到build/generated/source/greendao下面，还需要拷贝到自己的目录中，所以这里还是指定生成目录为好。</p>
<h2 id="2-建实体bean"><a href="#2-建实体bean" class="headerlink" title="2. 建实体bean."></a>2. 建实体bean.</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Id</span></div><div class="line">    <span class="keyword">private</span> Long id;</div><div class="line">    <span class="meta">@Property</span>(nameInDb = <span class="string">"USERNAME"</span>)</div><div class="line">    <span class="keyword">private</span> String username;</div><div class="line">    <span class="meta">@Property</span>(nameInDb = <span class="string">"NICKNAME"</span>)</div><div class="line">    <span class="keyword">private</span> String nickname;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>一些常用的注解</p>
</blockquote>
<p><img src="https://i.niupic.com/images/2017/02/10/UZlYU6.png"></p>
<p>OK，写完这些之后将项目进行编译，编译成功之后系统会帮助我们生成相应的构造方法和get/set方法，并且还会在我们的包下生成DaoMaster和DaoSession。</p>
<p>build之后，项目下会自动生成一些类，User类也会自动生成一些东西</p>
<p><img src="https://i.niupic.com/images/2017/02/10/1UuQ5W.png"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Id</span></div><div class="line">    <span class="keyword">private</span> Long id;</div><div class="line">    <span class="meta">@Property</span>(nameInDb = <span class="string">"USERNAME"</span>)</div><div class="line">    <span class="keyword">private</span> String username;</div><div class="line">    <span class="meta">@Property</span>(nameInDb = <span class="string">"AGE"</span>)</div><div class="line">    <span class="keyword">private</span> String age;</div><div class="line">    <span class="meta">@Generated</span>(hash = <span class="number">1942375784</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(Long id, String username, String age)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">        <span class="keyword">this</span>.username = username;</div><div class="line">        <span class="keyword">this</span>.age = age;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Generated</span>(hash = <span class="number">586692638</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.id;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.username;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.username = username;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(String age)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.age = age;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3-写一个对数据库进行操作的Util-在构造方法中对获取DaoSession-然后获取到UserDao。"><a href="#3-写一个对数据库进行操作的Util-在构造方法中对获取DaoSession-然后获取到UserDao。" class="headerlink" title="3.写一个对数据库进行操作的Util.在构造方法中对获取DaoSession,然后获取到UserDao。"></a>3.写一个对数据库进行操作的Util.在构造方法中对获取DaoSession,然后获取到UserDao。</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBUtil</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> DaoSession mDaoSession;</div><div class="line">    <span class="keyword">private</span> UserDao mUserDao;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DBUtil</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line"></div><div class="line">        DaoMaster.DevOpenHelper devOpenHelper = <span class="keyword">new</span> DaoMaster.DevOpenHelper(context, <span class="string">"user.db"</span>,</div><div class="line">                <span class="keyword">null</span>);</div><div class="line">        DaoMaster daoMaster = <span class="keyword">new</span> DaoMaster(devOpenHelper.getWritableDb());</div><div class="line">        mDaoSession = daoMaster.newSession();</div><div class="line">        mUserDao = mDaoSession.getUserDao();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 增</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertUser</span><span class="params">(User user)</span> </span>&#123;</div><div class="line">        mUserDao.insert(user);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 删一个</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteOne</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">        User user = mUserDao.queryBuilder().where(UserDao.Properties.Id.eq(id)).build().unique();</div><div class="line">        mUserDao.delete(user);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 删全部</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteAll</span><span class="params">()</span> </span>&#123;</div><div class="line">        mUserDao.deleteAll();</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@param</span> id 需要更新的age值。</div><div class="line">     * 改</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line"></div><div class="line">        User user = mUserDao.queryBuilder().where(UserDao.Properties.Id.eq(id)).build().unique();</div><div class="line">        user.setUsername(<span class="string">"张三被修改成了李四"</span>);</div><div class="line">        mUserDao.update(user);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 查一个</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">queryOne</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line"></div><div class="line">        User user = mUserDao.queryBuilder().where(UserDao.Properties.Id.eq(id)).build().unique();</div><div class="line">        <span class="keyword">return</span> user;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 查询一批</div><div class="line">     * <span class="doctag">@param</span> startId 起始id</div><div class="line">     * <span class="doctag">@param</span> endId 结束id</div><div class="line">     *</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">querySome</span><span class="params">(<span class="keyword">int</span> startId,<span class="keyword">int</span> endId)</span> </span>&#123;</div><div class="line"></div><div class="line">        List&lt;User&gt; users = mUserDao.queryBuilder().where(UserDao.Properties.Id.between(startId,</div><div class="line">                endId)).build().list();</div><div class="line">        <span class="keyword">return</span> users;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 查全部</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">queryAll</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mUserDao.loadAll();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>调试数据库的时候，建议使用steto进行调试。</p>
<p><img src="https://i.niupic.com/images/2017/02/10/c0i1wv.png"></p>
<p><a href="https://github.com/frankandroid/GreenDaoDemo.git" target="_blank" rel="external">源代码已经上传到github</a>;</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在APP开发中，经常会需要使用到数据库，用SqliteOpenHelper效率不是很高，也更麻烦，所以用GreenDao会高效一些。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1-首先在项目中导入GreenDao的库。&quot;&gt;&lt;a href=
    
    </summary>
    
      <category term="第三方框架使用" scheme="http://yoursite.com/categories/%E7%AC%AC%E4%B8%89%E6%96%B9%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/"/>
    
    
      <category term="GreenDao3.0" scheme="http://yoursite.com/tags/GreenDao3-0/"/>
    
  </entry>
  
  <entry>
    <title>android集成微信支付</title>
    <link href="http://yoursite.com/2016/11/10/android%E9%9B%86%E6%88%90%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98/"/>
    <id>http://yoursite.com/2016/11/10/android集成微信支付/</id>
    <published>2016-11-10T07:11:04.000Z</published>
    <updated>2016-11-10T07:11:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="android集成微信支付"><a href="#android集成微信支付" class="headerlink" title="android集成微信支付"></a>android集成微信支付</h1><ol>
<li><p><a href="https://pay.weixin.qq.com/wiki/doc/api/app/app.php?chapter=8_5#" target="_blank" rel="external">先看微信的官方文档</a>;</p>
</li>
<li><p>根据应用的包名生成应用的签名，注意需要是正式包，然后配置到后台<br><img src="https://i.niupic.com/images/2017/02/09/ZnwO60.png"><br><img src="https://i.niupic.com/images/2017/02/09/MOLd6E.png"></p>
</li>
<li><p>把微信提供的jar包放入到libs目录下，在Manifest文件中配置好WXPayEntryActivity（看第四步）。</p>
</li>
</ol>
<p><img src="https://i.niupic.com/images/2017/02/09/UHOAx0.png"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 微信支付 --&gt;</div><div class="line">       &lt;activity</div><div class="line">           android:name=<span class="string">".wxapi.WXPayEntryActivity"</span></div><div class="line">           android:exported=<span class="string">"true"</span></div><div class="line">           android:launchMode=<span class="string">"singleTop"</span> /&gt;</div></pre></td></tr></table></figure>
<ol>
<li>必须在项目包名的根目录下建一个名称为”wxapi”的文件夹。然后放入WXPayEntryActivity类。这个细节很重要。<br><img src="https://i.niupic.com/images/2017/02/09/sIJEKh.png"></li>
</ol>
<ol>
<li>去后台请求数据</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">goToWePay</span><span class="params">(String orderId)</span> </span>&#123;</div><div class="line"></div><div class="line">        Observable&lt;BaseBean&lt;WePayResBean&gt;&gt; wePayObservable = getDataStore().goToWePay(orderId, Constant.Pay.WE_PAY);</div><div class="line"></div><div class="line">        wePayObservable.compose(<span class="keyword">this</span>.&lt;BaseBean&lt;WePayResBean&gt;&gt;bindToLifecycle())</div><div class="line">                .observeOn(AndroidSchedulers.mainThread())</div><div class="line">                .subscribe(<span class="keyword">new</span> Subscriber&lt;BaseBean&lt;WePayResBean&gt;&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line"></div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(BaseBean&lt;WePayResBean&gt; wePayResBeanBaseBean)</span> </span>&#123;</div><div class="line">                        <span class="keyword">if</span> (wePayResBeanBaseBean.code==Constant.SUC)&#123;</div><div class="line">                            mView.onGoToWePaySuc(wePayResBeanBaseBean.data);</div><div class="line">                        &#125;<span class="keyword">else</span>&#123;</div><div class="line">                            mView.onGoToWePayFailed(wePayResBeanBaseBean.msg);</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ol>
<li>获取数据的bean</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WePayResBean</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> String appid;</div><div class="line">    <span class="keyword">public</span> String noncestr;</div><div class="line">    <span class="keyword">public</span> String packageValue;</div><div class="line">    <span class="keyword">public</span> String partnerid;</div><div class="line">    <span class="keyword">public</span> String prepayid;</div><div class="line">    <span class="keyword">public</span> String sign;</div><div class="line">    <span class="keyword">public</span> String timestamp;</div><div class="line"></div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>必须在项目包名的根目录下建一个名称为”wxapi”的文件夹。然后放入WXPayEntryActivity类。这个细节很重要。<br><img src="https://i.niupic.com/images/2017/02/09/sIJEKh.png"></li>
</ol>
<ol>
<li><p>获取数据成功后。调用微信的API。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onGoToWePaySuc</span><span class="params">(WePayResBean wePayResBean)</span> </span>&#123;</div><div class="line"></div><div class="line">       <span class="keyword">final</span> IWXAPI msgApi = WXAPIFactory.createWXAPI(mActivity, <span class="keyword">null</span>);</div><div class="line">       msgApi.registerApp(wePayResBean.getAppid());</div><div class="line"></div><div class="line">       PayReq request = <span class="keyword">new</span> PayReq();</div><div class="line">       request.appId = wePayResBean.getAppid();</div><div class="line">       request.partnerId = wePayResBean.getPartnerid();</div><div class="line">       request.prepayId = wePayResBean.getPrepayid();</div><div class="line">       request.packageValue = <span class="string">"Sign=WXPay"</span>;</div><div class="line">       request.nonceStr = wePayResBean.getNoncestr();</div><div class="line">       request.timeStamp = wePayResBean.getTimestamp();</div><div class="line">       request.sign = wePayResBean.getSign();</div><div class="line"></div><div class="line">       msgApi.sendReq(request);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>支付返回的结果会发送到WXPayEntryActivity类中。</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//这个类是微信提供的类。</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WXPayEntryActivity</span> <span class="keyword">extends</span> <span class="title">BaseActivity</span> <span class="keyword">implements</span> <span class="title">IWXAPIEventHandler</span>, <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"MicroMsg.SDKSample.WXPayEntryActivity"</span>;</div><div class="line">    <span class="meta">@BindView</span>(R.id.toolbar)</div><div class="line">    SimpleToolbar mToolbar;</div><div class="line">    <span class="meta">@BindView</span>(R.id.pay_suc_iv)</div><div class="line">    ImageView     mPaySucIv;</div><div class="line">    <span class="meta">@BindView</span>(R.id.pay_failed_iv)</div><div class="line">    ImageView     mPayFailedIv;</div><div class="line">    <span class="meta">@BindView</span>(R.id.thank_tv)</div><div class="line">    TextView      mThankTv;</div><div class="line">    <span class="meta">@BindView</span>(R.id.go_to_tv)</div><div class="line">    TextView      mGoToTv;</div><div class="line">    <span class="meta">@BindView</span>(R.id.pay_order_suc_ll)</div><div class="line">    LinearLayout  mPayOrderSucLl;</div><div class="line">    <span class="meta">@BindView</span>(R.id.pay_result_tv)</div><div class="line">    TextView      mPayResultTv;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> IWXAPI api;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isPaySuc;</div><div class="line">    <span class="keyword">private</span> Handler mHandler;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mIsFromRed;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_pay_success);</div><div class="line">        ButterKnife.bind(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">        <span class="comment">//初始化</span></div><div class="line">        mHandler = <span class="keyword">new</span> Handler();</div><div class="line">        api = WXAPIFactory.createWXAPI(<span class="keyword">this</span>, Constant.APP_ID);</div><div class="line">        api.handleIntent(getIntent(), <span class="keyword">this</span>);</div><div class="line"></div><div class="line">        mToolbar.setOnNavigationClickListener(<span class="keyword">this</span>);</div><div class="line">        mGoToTv.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">onGetLayoutId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> R.layout.activity_pay_success;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//必须复写</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onNewIntent</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onNewIntent(intent);</div><div class="line">        setIntent(intent);</div><div class="line">        api.handleIntent(intent, <span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReq</span><span class="params">(BaseReq req)</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**支付成功与否的回掉*/</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResp</span><span class="params">(BaseResp resp)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (resp.getType() == ConstantsAPI.COMMAND_PAY_BY_WX) &#123;</div><div class="line">            <span class="keyword">if</span> (resp.errCode == <span class="number">0</span>) &#123;</div><div class="line">                setSuc();</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                setFailed();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 支付成功后显示的界面</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSuc</span><span class="params">()</span> </span>&#123;</div><div class="line">        isPaySuc = <span class="keyword">true</span>;</div><div class="line">        mPaySucIv.setVisibility(View.VISIBLE);</div><div class="line">        mPayFailedIv.setVisibility(View.GONE);</div><div class="line">        mThankTv.setVisibility(View.VISIBLE);</div><div class="line">        mPayOrderSucLl.setVisibility(View.VISIBLE);</div><div class="line"></div><div class="line">        mIsFromRed = PreferencesUtils.getBoolean(<span class="keyword">this</span>, Constant.Order.IS_FORM_RED);</div><div class="line">        <span class="keyword">if</span> (mIsFromRed)&#123;</div><div class="line">            mHandler.postDelayed(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                   goChatActivity();</div><div class="line">                &#125;</div><div class="line">            &#125;,<span class="number">500</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 支付失败后显示的界面</div><div class="line">     */</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFailed</span><span class="params">()</span> </span>&#123;</div><div class="line">        isPaySuc = <span class="keyword">false</span>;</div><div class="line">        mPayResultTv.setText(getString(R.string.pay_failed));</div><div class="line">        mPayFailedIv.setVisibility(View.VISIBLE);</div><div class="line">        mPaySucIv.setVisibility(View.GONE);</div><div class="line">        mThankTv.setVisibility(View.GONE);</div><div class="line">        mPayOrderSucLl.setVisibility(View.GONE);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>需要注意的有3点，第一点是：必须要在项目包名的根目录下，项目包名的根目录下建一个名称为”wxapi”的文件夹。然后放入WXPayEntryActivity类。<br>第二个是支付结果的回掉在WXPayEntryActivity中。第三点就是生成的配置到后台的签名必须是正式的签名。</p>
</blockquote>
<p><a href="http://www.962.net/azgame/142520.html" target="_blank" rel="external">欢迎下载我们的app:律正,在您需要帮助的时候给你提供法律咨询</a>;</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;android集成微信支付&quot;&gt;&lt;a href=&quot;#android集成微信支付&quot; class=&quot;headerlink&quot; title=&quot;android集成微信支付&quot;&gt;&lt;/a&gt;android集成微信支付&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://
    
    </summary>
    
      <category term="支付" scheme="http://yoursite.com/categories/%E6%94%AF%E4%BB%98/"/>
    
    
      <category term="支付" scheme="http://yoursite.com/tags/%E6%94%AF%E4%BB%98/"/>
    
  </entry>
  
  <entry>
    <title>android集成支付宝支付</title>
    <link href="http://yoursite.com/2016/11/09/android%E9%9B%86%E6%88%90%E6%94%AF%E4%BB%98%E5%AE%9D%E6%94%AF%E4%BB%98/"/>
    <id>http://yoursite.com/2016/11/09/android集成支付宝支付/</id>
    <published>2016-11-09T02:21:13.000Z</published>
    <updated>2016-11-09T02:21:13.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="android集成支付宝支付"><a href="#android集成支付宝支付" class="headerlink" title="android集成支付宝支付"></a>android集成支付宝支付</h1><ol>
<li><p><a href="https://doc.open.alipay.com/docs/doc.htm?spm=a219a.7629140.0.0.s9V7dl&amp;treeId=59&amp;articleId=103563&amp;docType=1" target="_blank" rel="external">首先当然是先看支付宝的官方文档</a>;</p>
</li>
<li><p>在项目的libs目录下放入支付宝的jar包。<br><img src="https://i.niupic.com/images/2017/02/09/l5WuJG.png"></p>
</li>
<li><p>修改Manifest</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 支付宝相关的activity --&gt;</div><div class="line">        &lt;activity</div><div class="line">            android:name=<span class="string">"com.alipay.sdk.app.H5PayActivity"</span></div><div class="line">            android:configChanges=<span class="string">"orientation|keyboardHidden|navigation"</span></div><div class="line">            android:exported=<span class="string">"false"</span></div><div class="line">            android:screenOrientation=<span class="string">"behind"</span> /&gt;</div><div class="line">        &lt;activity</div><div class="line">            android:name=<span class="string">"com.alipay.sdk.auth.AuthActivity"</span></div><div class="line">            android:configChanges=<span class="string">"orientation|keyboardHidden|navigation"</span></div><div class="line">            android:exported=<span class="string">"false"</span></div><div class="line">            android:screenOrientation=<span class="string">"behind"</span> /&gt;</div></pre></td></tr></table></figure>
<pre><code>加入权限
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;uses-permission android:name=<span class="string">"android.permission.INTERNET"</span> /&gt;</div><div class="line">&lt;uses-permission android:name=<span class="string">"android.permission.ACCESS_NETWORK_STATE"</span> /&gt;</div><div class="line">&lt;uses-permission android:name=<span class="string">"android.permission.ACCESS_WIFI_STATE"</span> /&gt;</div><div class="line">&lt;uses-permission android:name=<span class="string">"android.permission.READ_PHONE_STATE"</span> /&gt;</div><div class="line">&lt;uses-permission android:name=<span class="string">"android.permission.WRITE_EXTERNAL_STORAGE"</span> /&gt;</div></pre></td></tr></table></figure>
<ol>
<li>去后台请求数据</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">goToAliPay</span><span class="params">(String orderId)</span> </span>&#123;</div><div class="line">        Observable&lt;BaseBean&lt;String&gt;&gt; aliPayObservable = getDataStore().goToAliPay(orderId, Constant.Pay.ALI_PAY);</div><div class="line">        aliPayObservable.compose(<span class="keyword">this</span>.&lt;BaseBean&lt;String&gt;&gt;bindToLifecycle())</div><div class="line">                .observeOn(AndroidSchedulers.mainThread())</div><div class="line">                .subscribe(<span class="keyword">new</span> Subscriber&lt;BaseBean&lt;String&gt;&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">                    &#125;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">                        e.printStackTrace();</div><div class="line">                    &#125;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(BaseBean&lt;String&gt; stringBaseBean)</span> </span>&#123;</div><div class="line">                         <span class="keyword">if</span> (stringBaseBean.code==Constant.SUC)&#123;</div><div class="line">                             mView.onGoToAliPaySuc(stringBaseBean.data);</div><div class="line">                         &#125;<span class="keyword">else</span>&#123;</div><div class="line">                             mView.onGoToAliPayFailed();</div><div class="line">                         &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ol>
<li>拿到后台返回的String字符串。</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onGoToAliPaySuc</span><span class="params">(<span class="keyword">final</span> String aliMsg)</span> </span>&#123;</div><div class="line"></div><div class="line">    Runnable payRunnable = <span class="keyword">new</span> Runnable() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            PayTask alipay = <span class="keyword">new</span> PayTask(mActivity);</div><div class="line">            String result = alipay.pay(aliMsg, <span class="keyword">true</span>);</div><div class="line">            Message msg = <span class="keyword">new</span> Message();</div><div class="line">            msg.what = SDK_PAY_FLAG;</div><div class="line">            msg.obj = result;</div><div class="line">            mHandler.sendMessage(msg);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">    <span class="comment">// 必须异步调用</span></div><div class="line">    Thread payThread = <span class="keyword">new</span> Thread(payRunnable);</div><div class="line">    payThread.start();</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li><p>复制PayResult类到项目中。后面会用到。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PayResult</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> String resultStatus;</div><div class="line">	<span class="keyword">private</span> String result;</div><div class="line">	<span class="keyword">private</span> String memo;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">PayResult</span><span class="params">(String rawResult)</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (TextUtils.isEmpty(rawResult))</div><div class="line">			<span class="keyword">return</span>;</div><div class="line"></div><div class="line">		String[] resultParams = rawResult.split(<span class="string">";"</span>);</div><div class="line">		<span class="keyword">for</span> (String resultParam : resultParams) &#123;</div><div class="line">			<span class="keyword">if</span> (resultParam.startsWith(<span class="string">"resultStatus"</span>)) &#123;</div><div class="line">				resultStatus = gatValue(resultParam, <span class="string">"resultStatus"</span>);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span> (resultParam.startsWith(<span class="string">"result"</span>)) &#123;</div><div class="line">				result = gatValue(resultParam, <span class="string">"result"</span>);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span> (resultParam.startsWith(<span class="string">"memo"</span>)) &#123;</div><div class="line">				memo = gatValue(resultParam, <span class="string">"memo"</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"resultStatus=&#123;"</span> + resultStatus + <span class="string">"&#125;;memo=&#123;"</span> + memo</div><div class="line">				+ <span class="string">"&#125;;result=&#123;"</span> + result + <span class="string">"&#125;"</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">private</span> String <span class="title">gatValue</span><span class="params">(String content, String key)</span> </span>&#123;</div><div class="line">		String prefix = key + <span class="string">"=&#123;"</span>;</div><div class="line">		<span class="keyword">return</span> content.substring(content.indexOf(prefix) + prefix.length(),</div><div class="line">				content.lastIndexOf(<span class="string">"&#125;"</span>));</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * <span class="doctag">@return</span> the resultStatus</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getResultStatus</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> resultStatus;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * <span class="doctag">@return</span> the memo</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getMemo</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> memo;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * <span class="doctag">@return</span> the result</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getResult</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>在Handler里面接受消息。</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">private</span> Handler mHandler = <span class="keyword">new</span> Handler() &#123;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">            <span class="keyword">switch</span> (msg.what) &#123;</div><div class="line"></div><div class="line">                <span class="keyword">case</span> SDK_PAY_FLAG: &#123;</div><div class="line">                    PayResult payResult = <span class="keyword">new</span> PayResult((String) msg.obj);</div><div class="line">                    <span class="comment">/**</span></div><div class="line">                     * 同步返回的结果必须放置到服务端进行验证，建议商户依赖异步通知</div><div class="line">                     */</div><div class="line">                    String resultInfo = payResult.getResult();<span class="comment">// 同步返回需要验证的信息</span></div><div class="line"></div><div class="line">                    String resultStatus = payResult.getResultStatus();</div><div class="line">                    <span class="comment">// 判断resultStatus 为“9000”则代表支付成功，具体状态码代表含义可参考接口文档</span></div><div class="line">                    <span class="keyword">if</span> (TextUtils.equals(resultStatus, <span class="string">"9000"</span>)) &#123;</div><div class="line">                        Toast.makeText(mActivity, <span class="string">"支付成功"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">                        </div><div class="line">                        <span class="comment">//跳转到展示页面</span></div><div class="line">                        Intent intent = <span class="keyword">new</span> Intent(mActivity, WXPayEntryActivity.class);</div><div class="line">                        intent.putExtra(Constant.Pay.ALI_PAY_STATUES, <span class="keyword">true</span>);</div><div class="line">                        intent.putExtra(Constant.Pay.IS_FROM_ALI, <span class="keyword">true</span>);</div><div class="line">                        startActivity(intent);</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        <span class="comment">// 判断resultStatus 为非"9000"则代表可能支付失败</span></div><div class="line">                        <span class="comment">// "8000"代表支付结果因为支付渠道原因或者系统原因还在等待支付结果确认，最终交易是否成功以服务端异步通知为准（小概率状态）</span></div><div class="line">                        <span class="keyword">if</span> (TextUtils.equals(resultStatus, <span class="string">"8000"</span>)) &#123;</div><div class="line">                            Toast.makeText(mActivity, <span class="string">"支付结果确认中"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">                        &#125; <span class="keyword">else</span> &#123;</div><div class="line">                            <span class="comment">// 其他值就可以判断为支付失败，包括用户主动取消支付，或者系统返回的错误</span></div><div class="line">                            Toast.makeText(mActivity, <span class="string">"支付失败"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">                        &#125;</div><div class="line">                        <span class="comment">//跳转到展示页面</span></div><div class="line">                        Intent intent = <span class="keyword">new</span> Intent(mActivity, WXPayEntryActivity.class);</div><div class="line">                        intent.putExtra(Constant.Pay.IS_FROM_ALI, <span class="keyword">true</span>);</div><div class="line">                        intent.putExtra(Constant.Pay.ALI_PAY_STATUES, <span class="keyword">false</span>);</div><div class="line">                        startActivity(intent);</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div></pre></td></tr></table></figure>
<blockquote>
<p>如果发现掉起了支付宝客户端，但是支付失败，那么多半是后台返回的数据有问题（之前项目中遇到过）。<br><img src="https://i.niupic.com/images/2017/02/09/mI0hZX.png"></p>
<p>整个流程大概就是这样，主要是写移动端集成的流程，方便以后复用。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;android集成支付宝支付&quot;&gt;&lt;a href=&quot;#android集成支付宝支付&quot; class=&quot;headerlink&quot; title=&quot;android集成支付宝支付&quot;&gt;&lt;/a&gt;android集成支付宝支付&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http
    
    </summary>
    
      <category term="支付" scheme="http://yoursite.com/categories/%E6%94%AF%E4%BB%98/"/>
    
    
      <category term="支付" scheme="http://yoursite.com/tags/%E6%94%AF%E4%BB%98/"/>
    
  </entry>
  
  <entry>
    <title>RxJava一些常用操作符的总结汇总</title>
    <link href="http://yoursite.com/2016/10/06/RxJava%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E7%AC%A6%E7%9A%84%E6%80%BB%E7%BB%93%E6%B1%87%E6%80%BB/"/>
    <id>http://yoursite.com/2016/10/06/RxJava一些常用操作符的总结汇总/</id>
    <published>2016-10-06T02:53:14.000Z</published>
    <updated>2016-10-06T02:53:14.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>RxJava现在非常的火，我们的项目中也采用了Rxjava+Dagger2+Mvp的架构，但是一直没有时间对这一块常用的操作符进行很好的总结。今天抓紧时间，把以前看过的博客重新梳理了一下，这里重点推荐两个博客，一个是<a href="http://blog.csdn.net/lzyzsd/article/details/41833541/" target="_blank" rel="external">大头鬼翻译的系列博客</a>,<br>另一个是<a href="http://gank.io/post/560e15be2dca930e00da1083" target="_blank" rel="external">扔物线的给Android开发者的RxJava 详解</a>，看完这两个感觉就会清晰很多。一些常用的操作符也会很清晰。说白了，RaJava主要做了两件事，一是一行代码进行线程切换，二是对数据源进行转换，转换成我们需要的数据。</p>
</blockquote>
<h1 id="创建观察者-Observer"><a href="#创建观察者-Observer" class="headerlink" title="创建观察者(Observer)"></a>创建观察者(Observer)</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//第一种</span></div><div class="line">Observer&lt;String&gt; observer = <span class="keyword">new</span> Observer&lt;String&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        Log.d(tag, <span class="string">"Item: "</span> + s);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.d(tag, <span class="string">"Completed!"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">        Log.d(tag, <span class="string">"Error!"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">//第二种</span></div><div class="line">Subscriber&lt;String&gt; subscriber = <span class="keyword">new</span> Subscriber&lt;String&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        Log.d(tag, <span class="string">"Item: "</span> + s);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.d(tag, <span class="string">"Completed!"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">        Log.d(tag, <span class="string">"Error!"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<blockquote>
<p>建议用第二种，在RxJava的subscribe过程中，Observer 也总是会先被转换成一个 Subscriber 再使用。</p>
</blockquote>
<h1 id="创建被观察者-Observable"><a href="#创建被观察者-Observable" class="headerlink" title="创建被观察者(Observable)"></a>创建被观察者(Observable)</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//第一种，用的比较少</span></div><div class="line">Observable observable = Observable.create(<span class="keyword">new</span> Observable.OnSubscribe&lt;String&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> String&gt; subscriber)</span> </span>&#123;</div><div class="line">        subscriber.onNext(<span class="string">"Hello"</span>);</div><div class="line">        subscriber.onNext(<span class="string">"Hi"</span>);</div><div class="line">        subscriber.onNext(<span class="string">"Aloha"</span>);</div><div class="line">        subscriber.onCompleted();</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//第二种，用的比较多，就是依次发送，just操作符。</span></div><div class="line">Observable observable = Observable.just(<span class="string">"Hello"</span>, <span class="string">"Hi"</span>, <span class="string">"Aloha"</span>);</div><div class="line"></div><div class="line"><span class="comment">//第三种，也用的比较多，依次发送一个数组或者集合里面的元素，from操作符。</span></div><div class="line"></div><div class="line">String[] words = &#123;<span class="string">"Hello"</span>, <span class="string">"Hi"</span>, <span class="string">"Aloha"</span>&#125;;</div><div class="line">Observable observable = Observable.from(words);</div></pre></td></tr></table></figure>
<h1 id="订阅"><a href="#订阅" class="headerlink" title="订阅"></a>订阅</h1><blockquote>
<p>由于我们会经常性的对数据源进行转换，所以是被观察者Observable在前，观察者Observer在后.</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">observable.subscribe(subscriber);</div></pre></td></tr></table></figure>
<h1 id="Action1-和-Action0"><a href="#Action1-和-Action0" class="headerlink" title="Action1 和 Action0"></a>Action1 和 Action0</h1><blockquote>
<p>有的时候你也可以不传入Subscriber,直接传入Action,</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//有参有返回值</span></div><div class="line">Action1&lt;String&gt; onNextAction = <span class="keyword">new</span> Action1&lt;String&gt;() &#123;</div><div class="line">    <span class="comment">// onNext()</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        Log.d(tag, s);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">Action1&lt;Throwable&gt; onErrorAction = <span class="keyword">new</span> Action1&lt;Throwable&gt;() &#123;</div><div class="line">    <span class="comment">// onError()</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Throwable throwable)</span> </span>&#123;</div><div class="line">        <span class="comment">// Error handling</span></div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">//无参无返回值</span></div><div class="line">Action0 onCompletedAction = <span class="keyword">new</span> Action0() &#123;</div><div class="line">    <span class="comment">// onCompleted()</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.d(tag, <span class="string">"completed"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 自动创建 Subscriber ，并使用 onNextAction 来定义 onNext()</span></div><div class="line">observable.subscribe(onNextAction);</div><div class="line"><span class="comment">// 自动创建 Subscriber ，并使用 onNextAction 和 onErrorAction 来定义 onNext() 和 onError()</span></div><div class="line">observable.subscribe(onNextAction, onErrorAction);</div><div class="line"><span class="comment">// 自动创建 Subscriber ，并使用 onNextAction、 onErrorAction 和 onCompletedAction 来定义 onNext()、 onError() 和 onCompleted()</span></div><div class="line">observable.subscribe(onNextAction, onErrorAction, onCompletedAction);</div></pre></td></tr></table></figure>
<h1 id="线程切换，Scheduler-（很重要）"><a href="#线程切换，Scheduler-（很重要）" class="headerlink" title="线程切换，Scheduler （很重要）"></a>线程切换，Scheduler （很重要）</h1><blockquote>
<p>在不指定线程的情况下， RxJava 遵循的是线程不变的原则，即：在哪个线程调用 subscribe()，就在哪个线程生产事件；在哪个线程生产事件，就在哪个线程消费事件。如果需要切换线程，就需要用到 Scheduler （调度器）。</p>
</blockquote>
<h2 id="常用的几个Scheduler"><a href="#常用的几个Scheduler" class="headerlink" title="常用的几个Scheduler"></a>常用的几个Scheduler</h2><ul>
<li>Schedulers.immediate(): 直接在当前线程运行，相当于不指定线程。这是默认的 Scheduler</li>
<li>Schedulers.newThread(): 总是启用新线程，并在新线程执行操作。</li>
<li>Schedulers.io(): <strong>(非常的常用)</strong>I/O 操作（读写文件、读写数据库、网络信息交互等）所使用的 Scheduler。行为模式和 newThread() 差不多，区别在于 io() 的内部实现是是用一个无数量上限的线程池，可以重用空闲的线程，因此多数情况下 io() 比 newThread() 更有效率。不要把计算工作放在 io() 中，可以避免创建不必要的线程。</li>
<li>Schedulers.computation(): 计算所使用的 Scheduler。这个计算指的是 CPU 密集型计算，即不会被 I/O 等操作限制性能的操作，例如图形的计算。这个 Scheduler 使用的固定的线程池，大小为 CPU 核数。不要把 I/O 操作放在 computation() 中，否则 I/O 操作的等待时间会浪费 CPU。</li>
<li>AndroidSchedulers.mainThread(): <strong>(非常的常用)</strong>它指定的操作将在 Android 主线程运行。</li>
</ul>
<h2 id="subscribeOn-和-observeOn-经常容易混淆。"><a href="#subscribeOn-和-observeOn-经常容易混淆。" class="headerlink" title="subscribeOn() 和 observeOn(),经常容易混淆。"></a>subscribeOn() 和 observeOn(),经常容易混淆。</h2><ul>
<li>subscribeOn(): 指定 subscribe() 所发生的线程，即 Observable.OnSubscribe 被激活时所处的线程。或者叫做事件产生的线程。 </li>
<li>observeOn(): 指定 Subscriber 所运行在的线程。或者叫做事件消费的线程。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//以下代码在安卓开发中非常的常见</span></div><div class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</div><div class="line">    .subscribeOn(Schedulers.io()) <span class="comment">// 指定 subscribe() 发生在 IO 线程</span></div><div class="line">    .observeOn(AndroidSchedulers.mainThread()) <span class="comment">// 指定 Subscriber 的回调发生在主线程</span></div><div class="line">    .subscribe(<span class="keyword">new</span> Action1&lt;Integer&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Integer number)</span> </span>&#123;</div><div class="line">            Log.d(tag, <span class="string">"number:"</span> + number);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<h2 id="需要注意的几个细节"><a href="#需要注意的几个细节" class="headerlink" title="需要注意的几个细节"></a>需要注意的几个细节</h2><ol>
<li>observeOn() 指定的是它之后的操作所在的线程,可以多次调用，调用的顺序有影响。</li>
<li>subscribeOn() 的位置放在哪里都可以，但是最先调用的一次有效果。（说只能调用一次也不太准确，因为在doOnSubscriber()的时候会调用离这个方法最近的subscribeOn()所在的线程。后面会有相关的描述。）</li>
</ol>
<h1 id="变换"><a href="#变换" class="headerlink" title="变换"></a>变换</h1><h2 id="map操作符"><a href="#map操作符" class="headerlink" title="map操作符"></a>map操作符</h2><blockquote>
<p>用于将一种数据转换成另一种数据，例如传入一个String类型的字符串，返回一个Bitmap对象，</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Observable.just(<span class="string">"images/logo.png"</span>) <span class="comment">// 输入类型 String</span></div><div class="line">    .map(<span class="keyword">new</span> Func1&lt;String, Bitmap&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> Bitmap <span class="title">call</span><span class="params">(String filePath)</span> </span>&#123; <span class="comment">// 参数类型 String</span></div><div class="line">            <span class="keyword">return</span> getBitmapFromPath(filePath); <span class="comment">// 返回类型 Bitmap</span></div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">    .subscribe(<span class="keyword">new</span> Action1&lt;Bitmap&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Bitmap bitmap)</span> </span>&#123; <span class="comment">// 参数类型 Bitmap</span></div><div class="line">            showBitmap(bitmap);</div><div class="line">        &#125;</div><div class="line">    &#125;)</div></pre></td></tr></table></figure>
<h2 id="Func"><a href="#Func" class="headerlink" title="Func"></a>Func</h2><blockquote>
<p>Func1 和 Action1 非常相似，也是 RxJava 的一个接口，用于包装含有一个参数的方法。 Func1 和 Action 的区别在于， Func1 包装的是有返回值的方法。</p>
</blockquote>
<h2 id="flatmap"><a href="#flatmap" class="headerlink" title="flatmap"></a>flatmap</h2><blockquote>
<p>flatmap 返回一个Observable对象，但是Subsciber接收到的是Observable对象的泛型，具体点说呢就是flatMap() 和 map() 有一个相同点：它也是把传入的参数转化之后返回另一个对象。但需要注意，和 map() 不同的是， flatMap() 中返回的是个 Observable 对象，并且这个 Observable 对象并不是被直接发送到了 Subscriber 的回调方法中。 flatMap() 的原理是这样的：</p>
<ol>
<li>使用传入的事件对象创建一个 Observable 对象；</li>
<li>并不发送这个 Observable, 而是将它激活，于是它开始发送事件；</li>
<li>每一个创建出来的 Observable 发送的事件，都被汇入同一个 Observable ，而这个 Observable 负责将这些事件统一交给 Subscriber 的回调方法。</li>
</ol>
</blockquote>
<p>这三个步骤，把事件拆成了两级，通过一组新创建的 Observable 将初始的对象『铺平』之后通过统一路径分发了下去。而这个『铺平』就是 flatMap() 所谓的 flat。</p>
<p>首先假设这么一种需求：有一个数据结构『学生』，现在需要打印出一组学生的名字。实现方式很简单：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">Student[] students = ...;</div><div class="line">Subscriber&lt;String&gt; subscriber = <span class="keyword">new</span> Subscriber&lt;String&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        Log.d(tag, name);</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;;</div><div class="line">Observable.from(students)</div><div class="line">    .map(<span class="keyword">new</span> Func1&lt;Student, String&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">(Student student)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> student.getName();</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">    .subscribe(subscriber);</div></pre></td></tr></table></figure>
<p>那么再假设：如果要打印出每个学生所需要修的所有课程的名称呢？（需求的区别在于，每个学生只有一个名字，但却有多个课程。）首先可以这样实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Student[] students = ...;</div><div class="line">Subscriber&lt;Student&gt; subscriber = <span class="keyword">new</span> Subscriber&lt;Student&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Student student)</span> </span>&#123;</div><div class="line">        List&lt;Course&gt; courses = student.getCourses();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; courses.size(); i++) &#123;</div><div class="line">            Course course = courses.get(i);</div><div class="line">            Log.d(tag, course.getName());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;;</div><div class="line">Observable.from(students)</div><div class="line">    .subscribe(subscriber);</div></pre></td></tr></table></figure></p>
<p>那么如果我不想在 Subscriber 中使用 for 循环，而是希望 Subscriber 中直接传入单个的 Course 对象呢（这对于代码复用很重要）？用 map() 显然是不行的，因为 map() 是一对一的转化，而我现在的要求是一对多的转化。那怎么才能把一个 Student 转化成多个 Course 呢？<br>这个时候，就需要用 flatMap() 了：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//这么做优雅多了。</span></div><div class="line">Student[] students = ...;</div><div class="line">Subscriber&lt;Course&gt; subscriber = <span class="keyword">new</span> Subscriber&lt;Course&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Course course)</span> </span>&#123;</div><div class="line">        Log.d(tag, course.getName());</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;;</div><div class="line">Observable.from(students)</div><div class="line">    .flatMap(<span class="keyword">new</span> Func1&lt;Student, Observable&lt;Course&gt;&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> Observable&lt;Course&gt; <span class="title">call</span><span class="params">(Student student)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> Observable.from(student.getCourses());</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">    .subscribe(subscriber);</div></pre></td></tr></table></figure>
<blockquote>
<p>一个小细节就是Func的泛型，Func&lt;传入的类型，返回值的类型&gt;。</p>
</blockquote>
<h2 id="转换的原理，其实就是把扔物线的话整理了一下，让自己更好明白。"><a href="#转换的原理，其实就是把扔物线的话整理了一下，让自己更好明白。" class="headerlink" title="转换的原理，其实就是把扔物线的话整理了一下，让自己更好明白。"></a>转换的原理，其实就是把扔物线的话整理了一下，让自己更好明白。</h2><p>订阅的原理</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 注意：这不是 subscribe() 的源码，而是将源码中与性能、兼容性、扩展性有关的代码剔除后的核心代码。</span></div><div class="line"><span class="comment">// 如果需要看源码，可以去 RxJava 的 GitHub 仓库下载。</span></div><div class="line"><span class="function"><span class="keyword">public</span> Subscription <span class="title">subscribe</span><span class="params">(Subscriber subscriber)</span> </span>&#123;</div><div class="line">    subscriber.onStart();</div><div class="line">    onSubscribe.call(subscriber);<span class="comment">//调用Observable的call方法。把Subscriber传入进去。</span></div><div class="line">    <span class="keyword">return</span> subscriber;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Observable observable = Observable.create(<span class="keyword">new</span> Observable.OnSubscribe&lt;String&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> String&gt; subscriber)</span> </span>&#123;</div><div class="line">        subscriber.onNext(<span class="string">"Hello"</span>);</div><div class="line">        subscriber.onNext(<span class="string">"Hi"</span>);</div><div class="line">        subscriber.onNext(<span class="string">"Aloha"</span>);</div><div class="line">        subscriber.onCompleted();</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>那么转换的原理和订阅的原理十分的类似，就是需要在Observable.onSubscribe的call方法中传入经过转换后的Subscriber。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 注意：这不是 lift() 的源码，而是将源码中与性能、兼容性、扩展性有关的代码剔除后的核心代码。</span></div><div class="line"><span class="comment">// 如果需要看源码，可以去 RxJava 的 GitHub 仓库下载。</span></div><div class="line"><span class="keyword">public</span> &lt;R&gt; <span class="function">Observable&lt;R&gt; <span class="title">lift</span><span class="params">(Operator&lt;? extends R, ? <span class="keyword">super</span> T&gt; operator)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> Observable.create(<span class="keyword">new</span> OnSubscribe&lt;R&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber subscriber)</span> </span>&#123;<span class="comment">//</span></div><div class="line">            Subscriber newSubscriber = operator.call(subscriber);<span class="comment">//注意这个生成的新的订阅者，传入旧的订阅者，生成新的订阅者。</span></div><div class="line">            newSubscriber.onStart();</div><div class="line">            onSubscribe.call(newSubscriber);<span class="comment">//最终call()方法中传入的是经过转换后的新的Subscriber。这样最终Observable被订阅的时候，就是调用的新的Subscriber的方法。</span></div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>精简掉细节的话，也可以这么说：在 Observable 执行了 lift(Operator) 方法之后，会返回一个新的 Observable，这个新的 Observable 会像一个代理一样，负责接收原始的 Observable 发出的事件，并在处理后发送给 Subscriber。</p>
<h1 id="Compose-对-Observable-整体的变换"><a href="#Compose-对-Observable-整体的变换" class="headerlink" title="Compose 对 Observable 整体的变换"></a>Compose 对 Observable 整体的变换</h1><blockquote>
<p>Compose操作符适用于当需要对一大批Observable进行整体变换的场合。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LiftAllTransformer</span> <span class="keyword">implements</span> <span class="title">Observable</span>.<span class="title">Transformer</span>&lt;<span class="title">Integer</span>, <span class="title">String</span>&gt; </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Observable&lt;String&gt; <span class="title">call</span><span class="params">(Observable&lt;Integer&gt; observable)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> observable</div><div class="line">            .lift1()</div><div class="line">            .lift2()</div><div class="line">            .lift3()</div><div class="line">            .lift4();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">...</div><div class="line">Transformer liftAll = <span class="keyword">new</span> LiftAllTransformer();</div><div class="line">observable1.compose(liftAll).subscribe(subscriber1);</div><div class="line">observable2.compose(liftAll).subscribe(subscriber2);</div><div class="line">observable3.compose(liftAll).subscribe(subscriber3);</div><div class="line">observable4.compose(liftAll).subscribe(subscriber4);</div></pre></td></tr></table></figure>
<h1 id="doOnSubscribe"><a href="#doOnSubscribe" class="headerlink" title="doOnSubscribe()"></a>doOnSubscribe()</h1><blockquote>
<p>它和 Subscriber.onStart() 同样是在 subscribe() 调用后而且在事件发送前执行，<br>但区别在于它可以指定线程。默认情况下， doOnSubscribe() 执行在 subscribe() 发生的线程；而如果在 doOnSubscribe() 之后有 subscribeOn() 的话，它将执行在离它最近的 subscribeOn() 所指定的线程</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Observable.create(onSubscribe)</div><div class="line">    .subscribeOn(Schedulers.io())</div><div class="line">    .doOnSubscribe(<span class="keyword">new</span> Action0() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</div><div class="line">            progressBar.setVisibility(View.VISIBLE); <span class="comment">// 需要在主线程执行</span></div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">    .subscribeOn(AndroidSchedulers.mainThread()) <span class="comment">// 指定主线程</span></div><div class="line">    .observeOn(AndroidSchedulers.mainThread())</div><div class="line">    .subscribe(subscriber);</div></pre></td></tr></table></figure>
<blockquote>
<p>就是这么多了。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;RxJava现在非常的火，我们的项目中也采用了Rxjava+Dagger2+Mvp的架构，但是一直没有时间对这一块常用的操作符进行很好的总结。今天抓紧时间，把以前看过的博客重新梳理了一下，这里重点推荐两个博客，一个是&lt;a href=&quot;http://
    
    </summary>
    
      <category term="第三方框架使用" scheme="http://yoursite.com/categories/%E7%AC%AC%E4%B8%89%E6%96%B9%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/"/>
    
    
      <category term="RxJava" scheme="http://yoursite.com/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>关于dagger2及其使用(2)</title>
    <link href="http://yoursite.com/2016/07/04/%E5%85%B3%E4%BA%8Edagger2%E7%9A%84%E4%BD%BF%E7%94%A8-2/"/>
    <id>http://yoursite.com/2016/07/04/关于dagger2的使用-2/</id>
    <published>2016-07-04T02:05:32.000Z</published>
    <updated>2016-07-04T02:05:32.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>接着上一篇的博客，我们来接着了解dagger2的其他操作符及其使用。包括Qualifier（限定符）、Singleton（单例）、Scope（作用域）,SubComponent等。</p>
</blockquote>
<h1 id="Qualifier"><a href="#Qualifier" class="headerlink" title="Qualifier"></a>Qualifier</h1><blockquote>
<p>Qualifier 这是一个限定符注解，什么情况下我们会需要用到限定符注解呢？当一个类的实例，有多种提供方法时，比如module里面提供了多个FirstStudent的实例<br>如果不使用限定符，那么dagger2会不知道究竟应该注入哪个，就会报错。接下来看在代码中如何具体的使用。</p>
<p>首先在module提供类实例的方法上加上限定符，@Named是Dagger2对于@Qualifier一个默认实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * @创建者 frank</div><div class="line"> * @时间 2017/1/22 17:45</div><div class="line"> * @描述：$&#123;module提供类的实例，当对于同一种类的实例，有多种提供方式时，需要用到<span class="doctag">@Qualifier</span>限定符&#125;</div><div class="line"> */</div><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstModule</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     *当一个类的实例有多种方式可以提供时，那么dagger2不知道需要去注入哪一个类的实例，这个时候，就需要用到<span class="doctag">@Qualifier</span>限定符。</div><div class="line">     * <span class="doctag">@Named</span>是Dagger2对于<span class="doctag">@Qualifier</span>一个默认实现，我们也可以自定义，比如<span class="doctag">@ForApplication</span>和<span class="doctag">@ForAcitivity</span>来标识不同的Context</div><div class="line">     * */</div><div class="line">    <span class="meta">@Named</span>(<span class="string">"agedStudent"</span>)</div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="function">FirstStudent <span class="title">provideAgedStudent</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FirstStudent(<span class="number">40</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Named</span>(<span class="string">"namedStudent"</span>)</div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="function">FirstStudent <span class="title">provideNamedStudent</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FirstStudent(<span class="string">"谢凯"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>接下来，在注入的类中，添加限定符。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Inject</span></div><div class="line"><span class="meta">@Named</span>(<span class="string">"namedStudent"</span>)</div><div class="line"><span class="comment">//@ForActivity</span></div><div class="line">FirstStudent mFirstStudent;</div></pre></td></tr></table></figure></p>
<p>如果需要自定义限定符。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Qualifier</span></div><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="meta">@Retention</span>(RUNTIME)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ForActivity &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<h1 id="Scope"><a href="#Scope" class="headerlink" title="Scope"></a>Scope</h1><blockquote>
<p>Scope是一个注解作用域，通过自定义注解限定对象的作用范围。通过这个注解能够解决不同对象生命周期不一致的问题.singleton是dagger自带的scope。<br>我们如果需要创建全局的单例<br></p>
<ul>
<li>在Module中定义创建全局类实例的方法</li>
<li>ApplicationComponent管理Module</li>
<li>保证ApplicationComponent只有一个实例（在app的Application中实例化ApplicationComponent）</li>
</ul>
<p>singleton其实就是dagger2默认提供的一个注解。和我们自己定义的scope注解并没有区别，如果你喜欢，也可以用以下的注解代替sigleton.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Scope</span></div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> PerApp &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>比如我们要创建一个全局单例的context</p>
<ol>
<li>在Module中定义创建全局类实例的方法<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123;</div><div class="line"></div><div class="line">    Context mContext;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AppModule</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        mContext = context;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="meta">@PerApp</span></div><div class="line">    <span class="function">Context <span class="title">provideAppContext</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mContext;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
</blockquote>
<ol>
<li><p>ApplicationComponent管理Module</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@PerApp</span></div><div class="line"><span class="meta">@Component</span>(modules = AppModule.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AppComponent</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function">Context <span class="title">getAppContext</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>保证ApplicationComponent只有一个实例（在app的Application中实例化ApplicationComponent）</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</div><div class="line">    AppComponent mAppComponent;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate();</div><div class="line">        mAppComponent = DaggerAppComponent.builder().appModule(<span class="keyword">new</span> AppModule(<span class="keyword">this</span>)).build();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>到这里我们就介绍了Scope和Qualifier，接下来我们跟着component之间的组织方式，了解其他的注解。</p>
</blockquote>
<h1 id="Component的组织方式。"><a href="#Component的组织方式。" class="headerlink" title="Component的组织方式。"></a>Component的组织方式。</h1><blockquote>
<p>Component的组织方式可以解决类实例共享的问题，比如其他的Component想要把全局的类实例注入到目标类中。具体的组织方式有以下三种。</p>
</blockquote>
<h3 id="依赖方式"><a href="#依赖方式" class="headerlink" title="依赖方式"></a>依赖方式</h3><p>一个Component是依赖于一个或多个Component，Component中的dependencies属性就是依赖方式的具体实现，例如，ActivityComponent依赖AppComponent</p>
<h3 id="包含方式"><a href="#包含方式" class="headerlink" title="包含方式"></a>包含方式</h3><p>一个Component是包含一个或多个Component的，被包含的Component还可以继续包含其他的Component。这种方式特别像Activity与Fragment的关系。SubComponent就是包含方式的具体实现。</p>
<h3 id="继承方式"><a href="#继承方式" class="headerlink" title="继承方式"></a>继承方式</h3><p>官网没有提到该方式，具体没有提到的原因我觉得应该是，该方式不是解决类实例共享的问题，而是从更好的管理、维护Component的角度，把一些Component共有的方法抽象到一个父类中，然后子Component继承</p>
<h4 id="需要注意的细节"><a href="#需要注意的细节" class="headerlink" title="需要注意的细节"></a>需要注意的细节</h4><ol>
<li><p>就是MainComponent继承ActivityComponent,那么也要标明作用域。@PerActivity</p>
</li>
<li><p>Component可以注入通过injectXXX()方法直接注入一个类，也可以通过返回一个类的对象，直接对外提供类的实例。看下面的代码。</p>
</li>
<li><p>MainComponent依赖于AppComponent,并不是说AppModule中有的就可以注入，而是要AppComponent已经注入过的。例如</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123;</div><div class="line"></div><div class="line">    Context mContext;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AppModule</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        mContext = context;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="meta">@PerApp</span></div><div class="line">    <span class="function">Context <span class="title">provideAppContext</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mContext;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Named</span>(<span class="string">"namedStudent"</span>)</div><div class="line">    <span class="meta">@Provides</span></div><div class="line">     <span class="function">FirstStudent <span class="title">provideNamedStudent</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FirstStudent(<span class="string">"谢凯"</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainModule</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Named</span>(<span class="string">"agedStudent"</span>)</div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="function">FirstStudent <span class="title">provideAgedStudent</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FirstStudent(<span class="number">40</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">   <span class="comment">/* @Named("namedStudent")</span></div><div class="line">    @Provides</div><div class="line">    FirstStudent provideNamedStudent()&#123;</div><div class="line">        return new FirstStudent("谢凯");</div><div class="line">    &#125;*/</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>以上的代码编译会报错，FirstStudent注入失败，原因是因为，依赖是指能够使用提供的实例，而不是指没有提供的，module里面有的。（上面的代码中，虽然AppModule中有提供FirstStudent,但是，在appComponent中并没有一个方法返回FirstStudent，所以当运行的时候会报错，因为<br>MainActivity中需要注入FirstStudent，但是在MainModule中找不到，并且，在AppComponent中也没有提供，所以当然就报错。）所以正确的做法是下面这样子的。</p>
</blockquote>
<ol>
<li><p>MainComponent依赖于AppComponent</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@PerActivity</span></div><div class="line"><span class="meta">@Component</span>(dependencies = AppComponent.class,modules = &#123;ActivityModule.class, MainModule.class&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MainComponent</span> <span class="keyword">extends</span> <span class="title">ActivityComponent</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">injectActivity</span><span class="params">(MainActivity mainActivity)</span></span>;</div><div class="line"></div><div class="line">    <span class="function">MainFragmentComponent <span class="title">getMainFragmentComponent</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>AppComponent中提供加了@Named注解的FirstStudent。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@PerApp</span></div><div class="line"><span class="meta">@Component</span>(modules = AppModule.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AppComponent</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function">Context <span class="title">getAppContext</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="meta">@Named</span>(<span class="string">"agedStudent"</span>)</div><div class="line">    <span class="function">FirstStudent <span class="title">provideFirstStudent</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>AppModule中提供加了@Named注解的FirstStudent。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123;</div><div class="line"></div><div class="line">    Context mContext;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AppModule</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        mContext = context;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="meta">@PerApp</span></div><div class="line">    <span class="function">Context <span class="title">provideAppContext</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mContext;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Named</span>(<span class="string">"agedStudent"</span>)</div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="function">FirstStudent <span class="title">provideAgedStudent</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FirstStudent(<span class="number">40</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>这个时候，MainComponent就可以提供一个FirstStudent,当在MainActivity中注入了FirstStudent就能够注入成功。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">BaseActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String mStudentJson = <span class="string">"&#123;\n"</span> +</div><div class="line">            <span class="string">"    \"name\": \"Jack\",\n"</span> +</div><div class="line">            <span class="string">"    \"age\": 18,\n"</span> +</div><div class="line">            <span class="string">"    \"isBoy\": true\n"</span> +</div><div class="line">            <span class="string">"&#125;"</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    <span class="meta">@Named</span>(<span class="string">"namedStudent"</span>)</div><div class="line">    FirstStudent mFirstStudent;</div><div class="line"></div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    <span class="meta">@Named</span>(<span class="string">"agedStudent"</span>)</div><div class="line">    FirstStudent mFirstAgeStudent;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> FirstComponent mFirstComponent;</div><div class="line">    <span class="keyword">private</span> ThirdLibComponent mThirdLibComponent;</div><div class="line">    <span class="keyword">private</span> TextView mShowContent;</div><div class="line">    <span class="keyword">private</span> GsonTestStudent mGsonTestStudent;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> MainComponent mMainComponent;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_scrolling);</div><div class="line">        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);</div><div class="line">        setSupportActionBar(toolbar);</div><div class="line"></div><div class="line">        mMainComponent = DaggerMainComponent.builder()</div><div class="line">                .mainModule(<span class="keyword">new</span> MainModule())</div><div class="line">                .activityModule(<span class="keyword">new</span> ActivityModule())</div><div class="line">                .appComponent(((App)getApplication()).getAppComponent())</div><div class="line">                .build();</div><div class="line"></div><div class="line">        mMainComponent.injectActivity(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">        mGsonTestStudent = mGson.fromJson(mStudentJson, GsonTestStudent.class);</div><div class="line"></div><div class="line">        FloatingActionButton fab = (FloatingActionButton) findViewById(R.id.fab);</div><div class="line">        fab.setOnClickListener(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">        Button injectFirst = (Button) findViewById(R.id.inject_first_student);</div><div class="line">        injectFirst.setOnClickListener(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">        Button injectModule = (Button) findViewById(R.id.inject_with_module);</div><div class="line">        injectModule.setOnClickListener(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">        mShowContent = (TextView) findViewById(R.id.show_content);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (v.getId()) &#123;</div><div class="line">            <span class="keyword">case</span> R.id.fab:</div><div class="line">                Snackbar.make(v, <span class="string">"dagger2"</span>, Snackbar.LENGTH_LONG)</div><div class="line">                        .setAction(<span class="string">"Action"</span>, <span class="keyword">null</span>).show();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.inject_first_student:</div><div class="line">                mShowContent.setText(<span class="string">""</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.inject_with_module:</div><div class="line">                mShowContent.setText(mGsonTestStudent.toString() + <span class="string">"---"</span></div><div class="line">                        + mFirstStudent.toString()</div><div class="line">                        +<span class="string">"---"</span>+mFirstAgeStudent.toString());</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<h1 id="Subcomponent"><a href="#Subcomponent" class="headerlink" title="Subcomponent"></a>Subcomponent</h1><blockquote>
<p>表明自己是被包含的Component,和dependencies类似。就是上级提供的你都有。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@PerActivity</span></div><div class="line"><span class="meta">@Subcomponent</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MainFragmentComponent</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">injectFragment</span><span class="params">(MainFragment mainFragment)</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@PerActivity</span></div><div class="line"><span class="meta">@Component</span>(dependencies = AppComponent.class, modules = &#123;ActivityModule.class, MainModule.class&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MainComponent</span> <span class="keyword">extends</span> <span class="title">ActivityComponent</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">injectActivity</span><span class="params">(MainActivity mainActivity)</span></span>;</div><div class="line"></div><div class="line">    <span class="function">MainFragmentComponent <span class="title">getMainFragmentComponent</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="meta">@Named</span>(<span class="string">"namedStudent"</span>)</div><div class="line">    <span class="function">FirstStudent <span class="title">provideFirstStudent</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityCreated</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onActivityCreated(savedInstanceState);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (getActivity() <span class="keyword">instanceof</span> MainActivity) &#123;</div><div class="line">       mMainFragmentComponent = ((MainActivity) getActivity()).getMainComponent().getMainFragmentComponent();</div><div class="line">       mMainFragmentComponent.injectFragment(<span class="keyword">this</span>);</div><div class="line">       mTextView.setText(mFirstStudent.toString());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>大概就是这么多了。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;接着上一篇的博客，我们来接着了解dagger2的其他操作符及其使用。包括Qualifier（限定符）、Singleton（单例）、Scope（作用域）,SubComponent等。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Qualifi
    
    </summary>
    
      <category term="第三方框架使用" scheme="http://yoursite.com/categories/%E7%AC%AC%E4%B8%89%E6%96%B9%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/"/>
    
    
      <category term="dagger2" scheme="http://yoursite.com/tags/dagger2/"/>
    
  </entry>
  
  <entry>
    <title>关于dagger2及其使用(1)</title>
    <link href="http://yoursite.com/2016/07/01/%E5%85%B3%E4%BA%8Edagger2%E7%9A%84%E4%BD%BF%E7%94%A8-1/"/>
    <id>http://yoursite.com/2016/07/01/关于dagger2的使用-1/</id>
    <published>2016-07-01T02:38:08.000Z</published>
    <updated>2016-07-01T02:38:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="dagger2-简介"><a href="#dagger2-简介" class="headerlink" title="dagger2 简介"></a>dagger2 简介</h2><blockquote>
<p>dagger2 是一个依赖注入框架，能够使项目更加的解耦。</p>
</blockquote>
<h2 id="如何添加到项目中"><a href="#如何添加到项目中" class="headerlink" title="如何添加到项目中"></a>如何添加到项目中</h2><blockquote>
<p>1 在project的build.gradle里面添加apt插件。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">buildscript &#123;</div><div class="line">    repositories &#123;</div><div class="line">        jcenter()</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath <span class="string">'com.android.tools.build:gradle:2.2.2'</span></div><div class="line"></div><div class="line">        classpath <span class="string">'com.neenbedankt.gradle.plugins:android-apt:1.8'</span></div><div class="line">        <span class="comment">// <span class="doctag">NOTE:</span> Do not place your application dependencies here; they belong</span></div><div class="line">        <span class="comment">// in the individual module build.gradle files</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2 在app的中的build.gradle文件中添加配置<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">apply plugin: <span class="string">'com.android.application'</span></div><div class="line">apply plugin: <span class="string">'com.neenbedankt.android-apt'</span><span class="comment">//应用添加的插件。</span></div><div class="line"></div><div class="line">android &#123;</div><div class="line">    compileSdkVersion <span class="number">25</span></div><div class="line">    buildToolsVersion <span class="string">"25.0.2"</span></div><div class="line">    defaultConfig &#123;</div><div class="line">        applicationId <span class="string">"com.hhly.dagger2sample"</span></div><div class="line">        minSdkVersion <span class="number">15</span></div><div class="line">        targetSdkVersion <span class="number">25</span></div><div class="line">        versionCode <span class="number">1</span></div><div class="line">        versionName <span class="string">"1.0"</span></div><div class="line">        testInstrumentationRunner <span class="string">"android.support.test.runner.AndroidJUnitRunner"</span></div><div class="line">    &#125;</div><div class="line">    buildTypes &#123;</div><div class="line">        release &#123;</div><div class="line">            <span class="function">minifyEnabled <span class="keyword">false</span></span></div><div class="line">            proguardFiles <span class="title">getDefaultProguardFile</span><span class="params">(<span class="string">'proguard-android.txt'</span>)</span>, 'proguard-rules.pro'</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    <span class="function">compile <span class="title">fileTree</span><span class="params">(dir: <span class="string">'libs'</span>, include: [<span class="string">'*.jar'</span>])</span></span></div><div class="line">    <span class="title">androidTestCompile</span><span class="params">(<span class="string">'com.android.support.test.espresso:espresso-core:2.2.2'</span>, &#123;</span></div><div class="line">        exclude group: <span class="string">'com.android.support'</span>, <span class="keyword">module</span>: <span class="string">'support-annotations'</span></div><div class="line">    &#125;)</div><div class="line">    compile 'com.android.support:appcompat-v7:25.1.0'</div><div class="line">    compile 'com.android.support:design:25.1.0'</div><div class="line">    testCompile 'junit:junit:4.12'</div><div class="line">    apt 'com.google.dagger:dagger-compiler:2.7'<span class="comment">//加入dagger2的依赖。</span></div><div class="line">    compile 'com.google.dagger:dagger:2.7'<span class="comment">// 加入dagger2的依赖。</span></div><div class="line">    provided 'javax.annotation:jsr250-api:1.0'<span class="comment">//加入dagger2的依赖。</span></div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="依赖注入简介"><a href="#依赖注入简介" class="headerlink" title="依赖注入简介"></a>依赖注入简介</h2><blockquote>
<p>依赖注入：就是目标类（目标类指的是这个类的成员变量中有其他类的对象）中所依赖的其他的类的初始化过程，<br>不是通过手动编码的方式创建，而是通过技术手段可以把其他的类的已经初始化好的实例自动注入到目标类中。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</div><div class="line">      B b = <span class="keyword">new</span> B(...);</div><div class="line">      C c = <span class="keyword">new</span> C();</div><div class="line">      D d = <span class="keyword">new</span> D(<span class="keyword">new</span> E());</div><div class="line">      F f = <span class="keyword">new</span> F(.....);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>上面的代码中class A就是指的目标类，对于class E来说,class D是class E的目标类，同时,class D又是class A的成员变量。</p>
<p>那么通过依赖注入，我们就可以这样写。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</div><div class="line">        <span class="meta">@Inject</span></div><div class="line">        B b;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</div><div class="line">       <span class="meta">@Inject</span></div><div class="line">       B()&#123;</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>通过对class A中的成员变量b，以及class B中的构造方法，添加@inject注解。我们就让他们之间有了一种无形的联系，那么怎么把这种<br>无形的联系变成有形的联系呢，这个时候我们就需要用到另外一个注解@Component</p>
</blockquote>
<h3 id="Component简介"><a href="#Component简介" class="headerlink" title="Component简介"></a>Component简介</h3><blockquote>
<p>Component也是一个注解类，一个类要想是Component，必须用Component注解来标注该类，并且该类是接口或抽象类<br>Component需要引用到目标类的实例，Component会查找目标类中用Inject注解标注的属性，<br>查找到相应的属性后会接着查找该属性对应的用Inject标注的构造函数（这时候就发生联系了），<br>剩下的工作就是初始化该属性的实例并把实例进行赋值。看代码：</p>
<p>1,建立component对象。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FirstComponent</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//对scorllingActivity进行依赖注入。</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">injectScrollingActivity</span><span class="params">(ScrollingActivity activity)</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>2,在目标类中，对FirstComponent进行实例化，并进行依赖注入操作。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Inject</span></div><div class="line">FirstStudent mFirstStudent;</div><div class="line"></div><div class="line"><span class="keyword">private</span> FirstComponent mFirstComponent;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    setContentView(R.layout.activity_scrolling);</div><div class="line">    Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);</div><div class="line">    setSupportActionBar(toolbar);</div><div class="line"></div><div class="line">    <span class="comment">//建立联系</span></div><div class="line">    mFirstComponent = DaggerFirstComponent.builder().build();</div><div class="line">    mFirstComponent.injectScrollingActivity(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">    FloatingActionButton fab = (FloatingActionButton) findViewById(R.id.fab);</div><div class="line">    fab.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">            Snackbar.make(view, <span class="string">"student age is"</span> + mFirstStudent.age, Snackbar.LENGTH_LONG)</div><div class="line">                    .setAction(<span class="string">"Action"</span>, <span class="keyword">null</span>).show();</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>到此，通过component,进行依赖注入，不需要new对象，就能够获取到FirstStudent的实例，但是现在有这样一种情况，如果是我们自己的类，我们当然可以在我们的构造方法加上@Inject注解<br>但是我们在实际的开发中，经常会需要引用第三方的libs,这个时候我们需要实例化某个类，就没有办法在构造方法上加上@inject注解了。这个时候，我们就要用到@Module 和@Provides注解了</p>
</blockquote>
<h3 id="Module和Provides"><a href="#Module和Provides" class="headerlink" title="Module和Provides"></a>Module和Provides</h3><blockquote>
<p>Module 和 Provide主要就是为了解决第三方包的依赖注入问题，当然，一般我们自己写的类也会通过Module的形式进行注入，方便管理，一个可以同时提供几个Module,<br>Module里面提供相关类的实例。接下来看代码。</p>
<p>首先，写一个类，加上@Module注解。然后在里面定义方法，提供相关的实例。这里我们以Gson为例<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//第三方的类</span></div><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThirdLibModule</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="function">Gson <span class="title">provideGson</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Gson();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//自己定义的类</span></div><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstModule</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="function">FirstStudent <span class="title">provideStudent</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FirstStudent(<span class="number">40</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>接下来在component里面添加Module<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span>(modules = &#123;ThirdLibModule.class, FirstModule.class&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ThirdLibComponent</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">injectScrollingActivity</span><span class="params">(ScrollingActivity activity)</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>最后在目标类中实例化Component,并注入目标类。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.hhly.dagger2sample;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.support.design.widget.FloatingActionButton;</div><div class="line"><span class="keyword">import</span> android.support.design.widget.Snackbar;</div><div class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</div><div class="line"><span class="keyword">import</span> android.support.v7.widget.Toolbar;</div><div class="line"><span class="keyword">import</span> android.view.Menu;</div><div class="line"><span class="keyword">import</span> android.view.MenuItem;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"><span class="keyword">import</span> android.widget.Button;</div><div class="line"><span class="keyword">import</span> android.widget.TextView;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.google.gson.Gson;</div><div class="line"><span class="keyword">import</span> com.hhly.dagger2sample.bean.FirstStudent;</div><div class="line"><span class="keyword">import</span> com.hhly.dagger2sample.bean.GsonTestStudent;</div><div class="line"><span class="keyword">import</span> com.hhly.dagger2sample.di.component.DaggerThirdLibComponent;</div><div class="line"><span class="keyword">import</span> com.hhly.dagger2sample.di.component.FirstComponent;</div><div class="line"><span class="keyword">import</span> com.hhly.dagger2sample.di.component.ThirdLibComponent;</div><div class="line"><span class="keyword">import</span> com.hhly.dagger2sample.di.<span class="keyword">module</span>.ThirdLibModule;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.inject.Inject;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScrollingActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String mStudentJson = <span class="string">"&#123;\n"</span> +</div><div class="line">            <span class="string">"    \"name\": \"Jack\",\n"</span> +</div><div class="line">            <span class="string">"    \"age\": 18,\n"</span> +</div><div class="line">            <span class="string">"    \"isBoy\": true\n"</span> +</div><div class="line">            <span class="string">"&#125;"</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    FirstStudent mFirstStudent;</div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    Gson mGson;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> FirstComponent mFirstComponent;</div><div class="line">    <span class="keyword">private</span> ThirdLibComponent mThirdLibComponent;</div><div class="line">    <span class="keyword">private</span> TextView mShowContent;</div><div class="line">    <span class="keyword">private</span> GsonTestStudent mGsonTestStudent;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_scrolling);</div><div class="line">        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);</div><div class="line">        setSupportActionBar(toolbar);</div><div class="line"></div><div class="line">        <span class="comment">//使用component直接建立联系</span></div><div class="line">        <span class="comment">/*mFirstComponent = DaggerFirstComponent.builder().build();</span></div><div class="line">        mFirstComponent.injectScrollingActivity(this);*/</div><div class="line"></div><div class="line">        <span class="comment">//使用module方式提供实例</span></div><div class="line">        mThirdLibComponent = DaggerThirdLibComponent.builder()</div><div class="line">                .thirdLibModule(<span class="keyword">new</span> ThirdLibModule())</div><div class="line">                .build();</div><div class="line"></div><div class="line">        mThirdLibComponent.injectScrollingActivity(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">         mGsonTestStudent = mGson.fromJson(mStudentJson, GsonTestStudent.class);</div><div class="line"></div><div class="line">        FloatingActionButton fab = (FloatingActionButton) findViewById(R.id.fab);</div><div class="line">        fab.setOnClickListener(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">        Button injectFirst = (Button) findViewById(R.id.inject_first_student);</div><div class="line">        injectFirst.setOnClickListener(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">        Button injectModule = (Button) findViewById(R.id.inject_with_module);</div><div class="line">        injectModule.setOnClickListener(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">        mShowContent = (TextView) findViewById(R.id.show_content);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> </span>&#123;</div><div class="line">        <span class="comment">// Inflate the menu; this adds items to the action bar if it is present.</span></div><div class="line">        getMenuInflater().inflate(R.menu.menu_scrolling, menu);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</div><div class="line">        <span class="comment">// Handle action bar item clicks here. The action bar will</span></div><div class="line">        <span class="comment">// automatically handle clicks on the Home/Up button, so long</span></div><div class="line">        <span class="comment">// as you specify a parent activity in AndroidManifest.xml.</span></div><div class="line">        <span class="keyword">int</span> id = item.getItemId();</div><div class="line"></div><div class="line">        <span class="comment">//noinspection SimplifiableIfStatement</span></div><div class="line">        <span class="keyword">if</span> (id == R.id.action_settings) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onOptionsItemSelected(item);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (v.getId()) &#123;</div><div class="line">            <span class="keyword">case</span> R.id.fab:</div><div class="line">                Snackbar.make(v, <span class="string">"dagger2"</span>, Snackbar.LENGTH_LONG)</div><div class="line">                        .setAction(<span class="string">"Action"</span>, <span class="keyword">null</span>).show();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.inject_first_student:</div><div class="line">                mShowContent.setText(<span class="string">""</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.inject_with_module:</div><div class="line">                mShowContent.setText(mGsonTestStudent.toString()+<span class="string">"///"</span>+mFirstStudent.toString());</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="注意-由于之前是通过注解的方式进行的依赖，所以FirstComponent中还保留着以下代码，会出bug-这个bug要注意。所以把代码注释掉。"><a href="#注意-由于之前是通过注解的方式进行的依赖，所以FirstComponent中还保留着以下代码，会出bug-这个bug要注意。所以把代码注释掉。" class="headerlink" title="注意:由于之前是通过注解的方式进行的依赖，所以FirstComponent中还保留着以下代码，会出bug,这个bug要注意。所以把代码注释掉。"></a>注意:由于之前是通过注解的方式进行的依赖，所以FirstComponent中还保留着以下代码，会出bug,这个bug要注意。所以把代码注释掉。</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span>()</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FirstComponent</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 注意一个类不能同时被两个component注入，因为这些东西是在编译的时候生成的，那么在编译的时候，你一个类同时</div><div class="line">     * 被两个component注入，那目标类会不知道去哪个component里面找，于是就去第一个找，结果找不到，于是就会</div><div class="line">     * 报错。</div><div class="line">     */</div><div class="line">   <span class="comment">/* void injectScrollingActivity(ScrollingActivity activity);*/</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>####一个需要注意的细节。</p>
<blockquote>
<p>创建类实例有2个维度可以创建：</p>
</blockquote>
<p>1 通过用Inject注解标注的构造函数来创建（以下简称Inject维度）<br><br>2 通过工厂模式的Module来创建（以下简称Module维度）<br></p>
<blockquote>
<p>这2个维度是有优先级之分的，Component会首先从Module维度中查找类实例，若找到就用Module维度创建类实例，并停止查找Inject维度。否则才是从Inject维度查找类实例。所以创建类实例级别Module维度要高于Inject维度。</p>
</blockquote>
<h4 id="第一篇先写这些，第二篇会接着介绍其他的注解以及其含义。"><a href="#第一篇先写这些，第二篇会接着介绍其他的注解以及其含义。" class="headerlink" title="第一篇先写这些，第二篇会接着介绍其他的注解以及其含义。"></a>第一篇先写这些，第二篇会接着介绍其他的注解以及其含义。</h4>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;dagger2-简介&quot;&gt;&lt;a href=&quot;#dagger2-简介&quot; class=&quot;headerlink&quot; title=&quot;dagger2 简介&quot;&gt;&lt;/a&gt;dagger2 简介&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;dagger2 是一个依赖注入框架，能够使项目更加
    
    </summary>
    
      <category term="第三方框架使用" scheme="http://yoursite.com/categories/%E7%AC%AC%E4%B8%89%E6%96%B9%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/"/>
    
    
      <category term="dagger2" scheme="http://yoursite.com/tags/dagger2/"/>
    
  </entry>
  
  <entry>
    <title>git的常用命令</title>
    <link href="http://yoursite.com/2016/03/07/git%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2016/03/07/git的常用命令/</id>
    <published>2016-03-07T09:46:45.000Z</published>
    <updated>2016-03-07T09:46:45.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="git-add-添加到版本库管理"><a href="#git-add-添加到版本库管理" class="headerlink" title="git add .     添加到版本库管理"></a>git add .     添加到版本库管理</h3><h3 id="git-commit-m-“提交到版本库”-提交到版本库"><a href="#git-commit-m-“提交到版本库”-提交到版本库" class="headerlink" title="git commit - m “提交到版本库”    提交到版本库"></a>git commit - m “提交到版本库”    提交到版本库</h3><h3 id="git-push-提交到远程"><a href="#git-push-提交到远程" class="headerlink" title="git push     提交到远程"></a>git push     提交到远程</h3><h3 id="git-branch-查看分支"><a href="#git-branch-查看分支" class="headerlink" title="git branch    查看分支"></a>git branch    查看分支</h3><h3 id="git-branch-vv-查看本地分支及远程分支以及他们之间的关联"><a href="#git-branch-vv-查看本地分支及远程分支以及他们之间的关联" class="headerlink" title="git branch -vv   查看本地分支及远程分支以及他们之间的关联"></a>git branch -vv   查看本地分支及远程分支以及他们之间的关联</h3><h3 id="git-clone-git-github-com-michaelliao-gitskills-git-从远程仓库clone"><a href="#git-clone-git-github-com-michaelliao-gitskills-git-从远程仓库clone" class="headerlink" title="git clone git@github.com:michaelliao/gitskills.git         从远程仓库clone"></a>git clone git@github.com:michaelliao/gitskills.git         从远程仓库clone</h3><h3 id="git-checkout-dev-切换到dev分支"><a href="#git-checkout-dev-切换到dev分支" class="headerlink" title="git checkout dev     切换到dev分支"></a>git checkout dev     切换到dev分支</h3><h3 id="git-checkout-origin-daily-1-4-1-git-从远程仓库clone指定分支"><a href="#git-checkout-origin-daily-1-4-1-git-从远程仓库clone指定分支" class="headerlink" title="git checkout origin/daily/1.4.1            git 从远程仓库clone指定分支"></a>git checkout origin/daily/1.4.1            git 从远程仓库clone指定分支</h3><h3 id="git-checkout-b-dev-创建dev分支并切换到dev分支"><a href="#git-checkout-b-dev-创建dev分支并切换到dev分支" class="headerlink" title="git checkout -b dev    创建dev分支并切换到dev分支"></a>git checkout -b dev    创建dev分支并切换到dev分支</h3><h3 id="git-merge-dev-把dev分支合并到当前分支"><a href="#git-merge-dev-把dev分支合并到当前分支" class="headerlink" title="git merge dev  把dev分支合并到当前分支"></a>git merge dev  把dev分支合并到当前分支</h3><h3 id="git-status-查看当前的状态"><a href="#git-status-查看当前的状态" class="headerlink" title="git status 查看当前的状态"></a>git status 查看当前的状态</h3><h3 id="git-branch-d-dev-删除dev分支"><a href="#git-branch-d-dev-删除dev分支" class="headerlink" title="git branch -d dev  删除dev分支"></a>git branch -d dev  删除dev分支</h3><h3 id="git-reset-–hard-3628164-将代码切换到某个版本"><a href="#git-reset-–hard-3628164-将代码切换到某个版本" class="headerlink" title="git reset –hard 3628164   将代码切换到某个版本"></a>git reset –hard 3628164   将代码切换到某个版本</h3><h3 id="git-log-可以查看提交历史，以便确定要回退到哪个版本"><a href="#git-log-可以查看提交历史，以便确定要回退到哪个版本" class="headerlink" title="git log  可以查看提交历史，以便确定要回退到哪个版本"></a>git log  可以查看提交历史，以便确定要回退到哪个版本</h3><h3 id="git-reflog-查看命令历史，以便确定要回到未来的哪个版本。"><a href="#git-reflog-查看命令历史，以便确定要回到未来的哪个版本。" class="headerlink" title="git reflog  查看命令历史，以便确定要回到未来的哪个版本。"></a>git reflog  查看命令历史，以便确定要回到未来的哪个版本。</h3><h3 id="git-remote-add-origin-git-github-com-michaelliao-learngit-git-与远程仓库建立联系"><a href="#git-remote-add-origin-git-github-com-michaelliao-learngit-git-与远程仓库建立联系" class="headerlink" title="git remote add origin git@github.com:michaelliao/learngit.git 与远程仓库建立联系"></a>git remote add origin git@github.com:michaelliao/learngit.git 与远程仓库建立联系</h3><h3 id="git-push-u-origin-master-我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令"><a href="#git-push-u-origin-master-我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令" class="headerlink" title="git push -u origin master 我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令"></a>git push -u origin master 我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令</h3><h3 id="git-branch-–set-upstream-to-origin-dev-本地分支同远程的dev分支建立关联"><a href="#git-branch-–set-upstream-to-origin-dev-本地分支同远程的dev分支建立关联" class="headerlink" title="git branch –set-upstream-to=origin/dev  本地分支同远程的dev分支建立关联"></a>git branch –set-upstream-to=origin/dev  本地分支同远程的dev分支建立关联</h3><h3 id="git-branch-u-origin-dev-本地分支同远程的dev分支建立关联"><a href="#git-branch-u-origin-dev-本地分支同远程的dev分支建立关联" class="headerlink" title="git branch -u origin/dev  本地分支同远程的dev分支建立关联"></a>git branch -u origin/dev  本地分支同远程的dev分支建立关联</h3><h3 id="git-tag-v1-0-打标签-v1-0"><a href="#git-tag-v1-0-打标签-v1-0" class="headerlink" title="git tag v1.0  打标签 v1.0"></a>git tag v1.0  打标签 v1.0</h3><h3 id="git-tag-查看所有标签"><a href="#git-tag-查看所有标签" class="headerlink" title="git tag   查看所有标签"></a>git tag   查看所有标签</h3><h3 id="git-tag-a-v0-1-m-“version-0-1-released”-3628164-打标签并附带说明"><a href="#git-tag-a-v0-1-m-“version-0-1-released”-3628164-打标签并附带说明" class="headerlink" title="git tag -a v0.1 -m “version 0.1 released” 3628164  打标签并附带说明"></a>git tag -a v0.1 -m “version 0.1 released” 3628164  打标签并附带说明</h3><h3 id="git-show-查看标签说明"><a href="#git-show-查看标签说明" class="headerlink" title="git show  查看标签说明"></a>git show <tagname> 查看标签说明</tagname></h3><h3 id="git-tag-d-v0-1-删除标签"><a href="#git-tag-d-v0-1-删除标签" class="headerlink" title="git tag -d v0.1 删除标签"></a>git tag -d v0.1 删除标签</h3><h3 id="git-push-origin-–tags-一次性推送全部本地标签"><a href="#git-push-origin-–tags-一次性推送全部本地标签" class="headerlink" title="git push origin –tags 一次性推送全部本地标签"></a>git push origin –tags 一次性推送全部本地标签</h3><h3 id="git-push-origin-v1-0-推送某个标签到远程"><a href="#git-push-origin-v1-0-推送某个标签到远程" class="headerlink" title="git push origin v1.0  推送某个标签到远程"></a>git push origin v1.0  推送某个标签到远程</h3><h3 id="git-tag-v0-9-6224937-对commit-id-为6224937的提交打标签"><a href="#git-tag-v0-9-6224937-对commit-id-为6224937的提交打标签" class="headerlink" title="git tag v0.9 6224937  对commit id 为6224937的提交打标签"></a>git tag v0.9 6224937  对commit id 为6224937的提交打标签</h3><h3 id="如何删除远程标签"><a href="#如何删除远程标签" class="headerlink" title="如何删除远程标签"></a>如何删除远程标签</h3><p>git tag -d v0.9<br>git push origin :refs/tags/v0.9</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;git-add-添加到版本库管理&quot;&gt;&lt;a href=&quot;#git-add-添加到版本库管理&quot; class=&quot;headerlink&quot; title=&quot;git add .     添加到版本库管理&quot;&gt;&lt;/a&gt;git add .     添加到版本库管理&lt;/h3&gt;&lt;h3 i
    
    </summary>
    
      <category term="git" scheme="http://yoursite.com/categories/git/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
</feed>
