<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Welcome</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-02-04T02:05:32.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>frankandroid</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于dagger2及其使用(2)haha</title>
    <link href="http://yoursite.com/2017/02/04/%E5%85%B3%E4%BA%8Edagger2%E7%9A%84%E4%BD%BF%E7%94%A8-2/"/>
    <id>http://yoursite.com/2017/02/04/关于dagger2的使用-2/</id>
    <published>2017-02-04T02:05:32.000Z</published>
    <updated>2017-02-04T02:05:32.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>接着上一篇的博客，我们来接着了解dagger2的其他操作符及其使用。包括Qualifier（限定符）、Singleton（单例）、Scope（作用域）,SubComponent等。</p>
</blockquote>
<h1 id="Qualifier"><a href="#Qualifier" class="headerlink" title="Qualifier"></a>Qualifier</h1><blockquote>
<p>Qualifier 这是一个限定符注解，什么情况下我们会需要用到限定符注解呢？当一个类的实例，有多种提供方法时，比如module里面提供了多个FirstStudent的实例<br>如果不使用限定符，那么dagger2会不知道究竟应该注入哪个，就会报错。接下来看在代码中如何具体的使用。</p>
<p>首先在module提供类实例的方法上加上限定符，@Named是Dagger2对于@Qualifier一个默认实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * @创建者 frank</div><div class="line"> * @时间 2017/1/22 17:45</div><div class="line"> * @描述：$&#123;module提供类的实例，当对于同一种类的实例，有多种提供方式时，需要用到<span class="doctag">@Qualifier</span>限定符&#125;</div><div class="line"> */</div><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstModule</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     *当一个类的实例有多种方式可以提供时，那么dagger2不知道需要去注入哪一个类的实例，这个时候，就需要用到<span class="doctag">@Qualifier</span>限定符。</div><div class="line">     * <span class="doctag">@Named</span>是Dagger2对于<span class="doctag">@Qualifier</span>一个默认实现，我们也可以自定义，比如<span class="doctag">@ForApplication</span>和<span class="doctag">@ForAcitivity</span>来标识不同的Context</div><div class="line">     * */</div><div class="line">    <span class="meta">@Named</span>(<span class="string">"agedStudent"</span>)</div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="function">FirstStudent <span class="title">provideAgedStudent</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FirstStudent(<span class="number">40</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Named</span>(<span class="string">"namedStudent"</span>)</div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="function">FirstStudent <span class="title">provideNamedStudent</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FirstStudent(<span class="string">"谢凯"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>接下来，在注入的类中，添加限定符。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Inject</span></div><div class="line"><span class="meta">@Named</span>(<span class="string">"namedStudent"</span>)</div><div class="line"><span class="comment">//@ForActivity</span></div><div class="line">FirstStudent mFirstStudent;</div></pre></td></tr></table></figure></p>
<p>如果需要自定义限定符。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Qualifier</span></div><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="meta">@Retention</span>(RUNTIME)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ForActivity &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<h1 id="Scope"><a href="#Scope" class="headerlink" title="Scope"></a>Scope</h1><blockquote>
<p>Scope是一个注解作用域，通过自定义注解限定对象的作用范围。通过这个注解能够解决不同对象生命周期不一致的问题.singleton是dagger自带的scope。<br>我们如果需要创建全局的单例<br></p>
<ul>
<li>在Module中定义创建全局类实例的方法</li>
<li>ApplicationComponent管理Module</li>
<li>保证ApplicationComponent只有一个实例（在app的Application中实例化ApplicationComponent）</li>
</ul>
<p>singleton其实就是dagger2默认提供的一个注解。和我们自己定义的scope注解并没有区别，如果你喜欢，也可以用以下的注解代替sigleton.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Scope</span></div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> PerApp &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>比如我们要创建一个全局单例的context</p>
<ol>
<li>在Module中定义创建全局类实例的方法<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123;</div><div class="line"></div><div class="line">    Context mContext;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AppModule</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        mContext = context;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="meta">@PerApp</span></div><div class="line">    <span class="function">Context <span class="title">provideAppContext</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mContext;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
</blockquote>
<ol>
<li><p>ApplicationComponent管理Module</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@PerApp</span></div><div class="line"><span class="meta">@Component</span>(modules = AppModule.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AppComponent</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function">Context <span class="title">getAppContext</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>保证ApplicationComponent只有一个实例（在app的Application中实例化ApplicationComponent）</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</div><div class="line">    AppComponent mAppComponent;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate();</div><div class="line">        mAppComponent = DaggerAppComponent.builder().appModule(<span class="keyword">new</span> AppModule(<span class="keyword">this</span>)).build();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>到这里我们就介绍了Scope和Qualifier，接下来我们跟着component之间的组织方式，了解其他的注解。</p>
</blockquote>
<h1 id="Component的组织方式。"><a href="#Component的组织方式。" class="headerlink" title="Component的组织方式。"></a>Component的组织方式。</h1><blockquote>
<p>Component的组织方式可以解决类实例共享的问题，比如其他的Component想要把全局的类实例注入到目标类中。具体的组织方式有以下三种。</p>
</blockquote>
<h3 id="依赖方式"><a href="#依赖方式" class="headerlink" title="依赖方式"></a>依赖方式</h3><p>一个Component是依赖于一个或多个Component，Component中的dependencies属性就是依赖方式的具体实现，例如，ActivityComponent依赖AppComponent</p>
<h3 id="包含方式"><a href="#包含方式" class="headerlink" title="包含方式"></a>包含方式</h3><p>一个Component是包含一个或多个Component的，被包含的Component还可以继续包含其他的Component。这种方式特别像Activity与Fragment的关系。SubComponent就是包含方式的具体实现。</p>
<h3 id="继承方式"><a href="#继承方式" class="headerlink" title="继承方式"></a>继承方式</h3><p>官网没有提到该方式，具体没有提到的原因我觉得应该是，该方式不是解决类实例共享的问题，而是从更好的管理、维护Component的角度，把一些Component共有的方法抽象到一个父类中，然后子Component继承</p>
<h4 id="需要注意的细节"><a href="#需要注意的细节" class="headerlink" title="需要注意的细节"></a>需要注意的细节</h4><ol>
<li><p>就是MainComponent继承ActivityComponent,那么也要标明作用域。@PerActivity</p>
</li>
<li><p>Component可以注入通过injectXXX()方法直接注入一个类，也可以通过返回一个类的对象，直接对外提供类的实例。看下面的代码。</p>
</li>
<li><p>MainComponent依赖于AppComponent,并不是说AppModule中有的就可以注入，而是要AppComponent已经注入过的。例如</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123;</div><div class="line"></div><div class="line">    Context mContext;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AppModule</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        mContext = context;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="meta">@PerApp</span></div><div class="line">    <span class="function">Context <span class="title">provideAppContext</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mContext;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Named</span>(<span class="string">"namedStudent"</span>)</div><div class="line">    <span class="meta">@Provides</span></div><div class="line">     <span class="function">FirstStudent <span class="title">provideNamedStudent</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FirstStudent(<span class="string">"谢凯"</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainModule</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Named</span>(<span class="string">"agedStudent"</span>)</div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="function">FirstStudent <span class="title">provideAgedStudent</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FirstStudent(<span class="number">40</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">   <span class="comment">/* @Named("namedStudent")</span></div><div class="line">    @Provides</div><div class="line">    FirstStudent provideNamedStudent()&#123;</div><div class="line">        return new FirstStudent("谢凯");</div><div class="line">    &#125;*/</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>以上的代码编译会报错，FirstStudent注入失败，原因是因为，依赖是指能够使用提供的实例，而不是指没有提供的，module里面有的。（上面的代码中，虽然AppModule中有提供FirstStudent,但是，在appComponent中并没有一个方法返回FirstStudent，所以当运行的时候会报错，因为<br>MainActivity中需要注入FirstStudent，但是在MainModule中找不到，并且，在AppComponent中也没有提供，所以当然就报错。）所以正确的做法是下面这样子的。</p>
</blockquote>
<ol>
<li><p>MainComponent依赖于AppComponent</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@PerActivity</span></div><div class="line"><span class="meta">@Component</span>(dependencies = AppComponent.class,modules = &#123;ActivityModule.class, MainModule.class&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MainComponent</span> <span class="keyword">extends</span> <span class="title">ActivityComponent</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">injectActivity</span><span class="params">(MainActivity mainActivity)</span></span>;</div><div class="line"></div><div class="line">    <span class="function">MainFragmentComponent <span class="title">getMainFragmentComponent</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>AppComponent中提供加了@Named注解的FirstStudent。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@PerApp</span></div><div class="line"><span class="meta">@Component</span>(modules = AppModule.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AppComponent</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function">Context <span class="title">getAppContext</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="meta">@Named</span>(<span class="string">"agedStudent"</span>)</div><div class="line">    <span class="function">FirstStudent <span class="title">provideFirstStudent</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>AppModule中提供加了@Named注解的FirstStudent。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123;</div><div class="line"></div><div class="line">    Context mContext;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AppModule</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        mContext = context;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="meta">@PerApp</span></div><div class="line">    <span class="function">Context <span class="title">provideAppContext</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mContext;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Named</span>(<span class="string">"agedStudent"</span>)</div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="function">FirstStudent <span class="title">provideAgedStudent</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FirstStudent(<span class="number">40</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>这个时候，MainComponent就可以提供一个FirstStudent,当在MainActivity中注入了FirstStudent就能够注入成功。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">BaseActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String mStudentJson = <span class="string">"&#123;\n"</span> +</div><div class="line">            <span class="string">"    \"name\": \"Jack\",\n"</span> +</div><div class="line">            <span class="string">"    \"age\": 18,\n"</span> +</div><div class="line">            <span class="string">"    \"isBoy\": true\n"</span> +</div><div class="line">            <span class="string">"&#125;"</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    <span class="meta">@Named</span>(<span class="string">"namedStudent"</span>)</div><div class="line">    FirstStudent mFirstStudent;</div><div class="line"></div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    <span class="meta">@Named</span>(<span class="string">"agedStudent"</span>)</div><div class="line">    FirstStudent mFirstAgeStudent;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> FirstComponent mFirstComponent;</div><div class="line">    <span class="keyword">private</span> ThirdLibComponent mThirdLibComponent;</div><div class="line">    <span class="keyword">private</span> TextView mShowContent;</div><div class="line">    <span class="keyword">private</span> GsonTestStudent mGsonTestStudent;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> MainComponent mMainComponent;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_scrolling);</div><div class="line">        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);</div><div class="line">        setSupportActionBar(toolbar);</div><div class="line"></div><div class="line">        mMainComponent = DaggerMainComponent.builder()</div><div class="line">                .mainModule(<span class="keyword">new</span> MainModule())</div><div class="line">                .activityModule(<span class="keyword">new</span> ActivityModule())</div><div class="line">                .appComponent(((App)getApplication()).getAppComponent())</div><div class="line">                .build();</div><div class="line"></div><div class="line">        mMainComponent.injectActivity(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">        mGsonTestStudent = mGson.fromJson(mStudentJson, GsonTestStudent.class);</div><div class="line"></div><div class="line">        FloatingActionButton fab = (FloatingActionButton) findViewById(R.id.fab);</div><div class="line">        fab.setOnClickListener(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">        Button injectFirst = (Button) findViewById(R.id.inject_first_student);</div><div class="line">        injectFirst.setOnClickListener(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">        Button injectModule = (Button) findViewById(R.id.inject_with_module);</div><div class="line">        injectModule.setOnClickListener(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">        mShowContent = (TextView) findViewById(R.id.show_content);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (v.getId()) &#123;</div><div class="line">            <span class="keyword">case</span> R.id.fab:</div><div class="line">                Snackbar.make(v, <span class="string">"dagger2"</span>, Snackbar.LENGTH_LONG)</div><div class="line">                        .setAction(<span class="string">"Action"</span>, <span class="keyword">null</span>).show();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.inject_first_student:</div><div class="line">                mShowContent.setText(<span class="string">""</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.inject_with_module:</div><div class="line">                mShowContent.setText(mGsonTestStudent.toString() + <span class="string">"---"</span></div><div class="line">                        + mFirstStudent.toString()</div><div class="line">                        +<span class="string">"---"</span>+mFirstAgeStudent.toString());</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<h1 id="Subcomponent"><a href="#Subcomponent" class="headerlink" title="Subcomponent"></a>Subcomponent</h1><blockquote>
<p>表明自己是被包含的Component,和dependencies类似。就是上级提供的你都有。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@PerActivity</span></div><div class="line"><span class="meta">@Subcomponent</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MainFragmentComponent</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">injectFragment</span><span class="params">(MainFragment mainFragment)</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@PerActivity</span></div><div class="line"><span class="meta">@Component</span>(dependencies = AppComponent.class, modules = &#123;ActivityModule.class, MainModule.class&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MainComponent</span> <span class="keyword">extends</span> <span class="title">ActivityComponent</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">injectActivity</span><span class="params">(MainActivity mainActivity)</span></span>;</div><div class="line"></div><div class="line">    <span class="function">MainFragmentComponent <span class="title">getMainFragmentComponent</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="meta">@Named</span>(<span class="string">"namedStudent"</span>)</div><div class="line">    <span class="function">FirstStudent <span class="title">provideFirstStudent</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityCreated</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onActivityCreated(savedInstanceState);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (getActivity() <span class="keyword">instanceof</span> MainActivity) &#123;</div><div class="line">       mMainFragmentComponent = ((MainActivity) getActivity()).getMainComponent().getMainFragmentComponent();</div><div class="line">       mMainFragmentComponent.injectFragment(<span class="keyword">this</span>);</div><div class="line">       mTextView.setText(mFirstStudent.toString());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>大概就是这么多了。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;接着上一篇的博客，我们来接着了解dagger2的其他操作符及其使用。包括Qualifier（限定符）、Singleton（单例）、Scope（作用域）,SubComponent等。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Qualifi
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>关于dagger2及其使用(1)</title>
    <link href="http://yoursite.com/2017/01/22/%E5%85%B3%E4%BA%8Edagger2%E7%9A%84%E4%BD%BF%E7%94%A8-1/"/>
    <id>http://yoursite.com/2017/01/22/关于dagger2的使用-1/</id>
    <published>2017-01-22T02:38:08.000Z</published>
    <updated>2017-01-22T02:38:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="dagger2-简介"><a href="#dagger2-简介" class="headerlink" title="dagger2 简介"></a>dagger2 简介</h2><blockquote>
<p>dagger2 是一个依赖注入框架，能够使项目更加的解耦。</p>
</blockquote>
<h2 id="如何添加到项目中"><a href="#如何添加到项目中" class="headerlink" title="如何添加到项目中"></a>如何添加到项目中</h2><blockquote>
<p>1 在project的build.gradle里面添加apt插件。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">buildscript &#123;</div><div class="line">    repositories &#123;</div><div class="line">        jcenter()</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath <span class="string">'com.android.tools.build:gradle:2.2.2'</span></div><div class="line"></div><div class="line">        classpath <span class="string">'com.neenbedankt.gradle.plugins:android-apt:1.8'</span></div><div class="line">        <span class="comment">// <span class="doctag">NOTE:</span> Do not place your application dependencies here; they belong</span></div><div class="line">        <span class="comment">// in the individual module build.gradle files</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2 在app的中的build.gradle文件中添加配置<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">apply plugin: <span class="string">'com.android.application'</span></div><div class="line">apply plugin: <span class="string">'com.neenbedankt.android-apt'</span><span class="comment">//应用添加的插件。</span></div><div class="line"></div><div class="line">android &#123;</div><div class="line">    compileSdkVersion <span class="number">25</span></div><div class="line">    buildToolsVersion <span class="string">"25.0.2"</span></div><div class="line">    defaultConfig &#123;</div><div class="line">        applicationId <span class="string">"com.hhly.dagger2sample"</span></div><div class="line">        minSdkVersion <span class="number">15</span></div><div class="line">        targetSdkVersion <span class="number">25</span></div><div class="line">        versionCode <span class="number">1</span></div><div class="line">        versionName <span class="string">"1.0"</span></div><div class="line">        testInstrumentationRunner <span class="string">"android.support.test.runner.AndroidJUnitRunner"</span></div><div class="line">    &#125;</div><div class="line">    buildTypes &#123;</div><div class="line">        release &#123;</div><div class="line">            <span class="function">minifyEnabled <span class="keyword">false</span></span></div><div class="line">            proguardFiles <span class="title">getDefaultProguardFile</span><span class="params">(<span class="string">'proguard-android.txt'</span>)</span>, 'proguard-rules.pro'</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    <span class="function">compile <span class="title">fileTree</span><span class="params">(dir: <span class="string">'libs'</span>, include: [<span class="string">'*.jar'</span>])</span></span></div><div class="line">    <span class="title">androidTestCompile</span><span class="params">(<span class="string">'com.android.support.test.espresso:espresso-core:2.2.2'</span>, &#123;</span></div><div class="line">        exclude group: <span class="string">'com.android.support'</span>, <span class="keyword">module</span>: <span class="string">'support-annotations'</span></div><div class="line">    &#125;)</div><div class="line">    compile 'com.android.support:appcompat-v7:25.1.0'</div><div class="line">    compile 'com.android.support:design:25.1.0'</div><div class="line">    testCompile 'junit:junit:4.12'</div><div class="line">    apt 'com.google.dagger:dagger-compiler:2.7'<span class="comment">//加入dagger2的依赖。</span></div><div class="line">    compile 'com.google.dagger:dagger:2.7'<span class="comment">// 加入dagger2的依赖。</span></div><div class="line">    provided 'javax.annotation:jsr250-api:1.0'<span class="comment">//加入dagger2的依赖。</span></div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="依赖注入简介"><a href="#依赖注入简介" class="headerlink" title="依赖注入简介"></a>依赖注入简介</h2><blockquote>
<p>依赖注入：就是目标类（目标类指的是这个类的成员变量中有其他类的对象）中所依赖的其他的类的初始化过程，<br>不是通过手动编码的方式创建，而是通过技术手段可以把其他的类的已经初始化好的实例自动注入到目标类中。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</div><div class="line">      B b = <span class="keyword">new</span> B(...);</div><div class="line">      C c = <span class="keyword">new</span> C();</div><div class="line">      D d = <span class="keyword">new</span> D(<span class="keyword">new</span> E());</div><div class="line">      F f = <span class="keyword">new</span> F(.....);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>上面的代码中class A就是指的目标类，对于class E来说,class D是class E的目标类，同时,class D又是class A的成员变量。</p>
<p>那么通过依赖注入，我们就可以这样写。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</div><div class="line">        <span class="meta">@Inject</span></div><div class="line">        B b;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</div><div class="line">       <span class="meta">@Inject</span></div><div class="line">       B()&#123;</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>通过对class A中的成员变量b，以及class B中的构造方法，添加@inject注解。我们就让他们之间有了一种无形的联系，那么怎么把这种<br>无形的联系变成有形的联系呢，这个时候我们就需要用到另外一个注解@Component</p>
</blockquote>
<h3 id="Component简介"><a href="#Component简介" class="headerlink" title="Component简介"></a>Component简介</h3><blockquote>
<p>Component也是一个注解类，一个类要想是Component，必须用Component注解来标注该类，并且该类是接口或抽象类<br>Component需要引用到目标类的实例，Component会查找目标类中用Inject注解标注的属性，<br>查找到相应的属性后会接着查找该属性对应的用Inject标注的构造函数（这时候就发生联系了），<br>剩下的工作就是初始化该属性的实例并把实例进行赋值。看代码：</p>
<p>1,建立component对象。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FirstComponent</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//对scorllingActivity进行依赖注入。</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">injectScrollingActivity</span><span class="params">(ScrollingActivity activity)</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>2,在目标类中，对FirstComponent进行实例化，并进行依赖注入操作。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Inject</span></div><div class="line">FirstStudent mFirstStudent;</div><div class="line"></div><div class="line"><span class="keyword">private</span> FirstComponent mFirstComponent;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    setContentView(R.layout.activity_scrolling);</div><div class="line">    Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);</div><div class="line">    setSupportActionBar(toolbar);</div><div class="line"></div><div class="line">    <span class="comment">//建立联系</span></div><div class="line">    mFirstComponent = DaggerFirstComponent.builder().build();</div><div class="line">    mFirstComponent.injectScrollingActivity(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">    FloatingActionButton fab = (FloatingActionButton) findViewById(R.id.fab);</div><div class="line">    fab.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">            Snackbar.make(view, <span class="string">"student age is"</span> + mFirstStudent.age, Snackbar.LENGTH_LONG)</div><div class="line">                    .setAction(<span class="string">"Action"</span>, <span class="keyword">null</span>).show();</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>到此，通过component,进行依赖注入，不需要new对象，就能够获取到FirstStudent的实例，但是现在有这样一种情况，如果是我们自己的类，我们当然可以在我们的构造方法加上@Inject注解<br>但是我们在实际的开发中，经常会需要引用第三方的libs,这个时候我们需要实例化某个类，就没有办法在构造方法上加上@inject注解了。这个时候，我们就要用到@Module 和@Provides注解了</p>
</blockquote>
<h3 id="Module和Provides"><a href="#Module和Provides" class="headerlink" title="Module和Provides"></a>Module和Provides</h3><blockquote>
<p>Module 和 Provide主要就是为了解决第三方包的依赖注入问题，当然，一般我们自己写的类也会通过Module的形式进行注入，方便管理，一个可以同时提供几个Module,<br>Module里面提供相关类的实例。接下来看代码。</p>
<p>首先，写一个类，加上@Module注解。然后在里面定义方法，提供相关的实例。这里我们以Gson为例<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//第三方的类</span></div><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThirdLibModule</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="function">Gson <span class="title">provideGson</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Gson();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//自己定义的类</span></div><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstModule</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="function">FirstStudent <span class="title">provideStudent</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FirstStudent(<span class="number">40</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>接下来在component里面添加Module<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span>(modules = &#123;ThirdLibModule.class, FirstModule.class&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ThirdLibComponent</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">injectScrollingActivity</span><span class="params">(ScrollingActivity activity)</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>最后在目标类中实例化Component,并注入目标类。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.hhly.dagger2sample;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.support.design.widget.FloatingActionButton;</div><div class="line"><span class="keyword">import</span> android.support.design.widget.Snackbar;</div><div class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</div><div class="line"><span class="keyword">import</span> android.support.v7.widget.Toolbar;</div><div class="line"><span class="keyword">import</span> android.view.Menu;</div><div class="line"><span class="keyword">import</span> android.view.MenuItem;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"><span class="keyword">import</span> android.widget.Button;</div><div class="line"><span class="keyword">import</span> android.widget.TextView;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.google.gson.Gson;</div><div class="line"><span class="keyword">import</span> com.hhly.dagger2sample.bean.FirstStudent;</div><div class="line"><span class="keyword">import</span> com.hhly.dagger2sample.bean.GsonTestStudent;</div><div class="line"><span class="keyword">import</span> com.hhly.dagger2sample.di.component.DaggerThirdLibComponent;</div><div class="line"><span class="keyword">import</span> com.hhly.dagger2sample.di.component.FirstComponent;</div><div class="line"><span class="keyword">import</span> com.hhly.dagger2sample.di.component.ThirdLibComponent;</div><div class="line"><span class="keyword">import</span> com.hhly.dagger2sample.di.<span class="keyword">module</span>.ThirdLibModule;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.inject.Inject;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScrollingActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String mStudentJson = <span class="string">"&#123;\n"</span> +</div><div class="line">            <span class="string">"    \"name\": \"Jack\",\n"</span> +</div><div class="line">            <span class="string">"    \"age\": 18,\n"</span> +</div><div class="line">            <span class="string">"    \"isBoy\": true\n"</span> +</div><div class="line">            <span class="string">"&#125;"</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    FirstStudent mFirstStudent;</div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    Gson mGson;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> FirstComponent mFirstComponent;</div><div class="line">    <span class="keyword">private</span> ThirdLibComponent mThirdLibComponent;</div><div class="line">    <span class="keyword">private</span> TextView mShowContent;</div><div class="line">    <span class="keyword">private</span> GsonTestStudent mGsonTestStudent;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_scrolling);</div><div class="line">        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);</div><div class="line">        setSupportActionBar(toolbar);</div><div class="line"></div><div class="line">        <span class="comment">//使用component直接建立联系</span></div><div class="line">        <span class="comment">/*mFirstComponent = DaggerFirstComponent.builder().build();</span></div><div class="line">        mFirstComponent.injectScrollingActivity(this);*/</div><div class="line"></div><div class="line">        <span class="comment">//使用module方式提供实例</span></div><div class="line">        mThirdLibComponent = DaggerThirdLibComponent.builder()</div><div class="line">                .thirdLibModule(<span class="keyword">new</span> ThirdLibModule())</div><div class="line">                .build();</div><div class="line"></div><div class="line">        mThirdLibComponent.injectScrollingActivity(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">         mGsonTestStudent = mGson.fromJson(mStudentJson, GsonTestStudent.class);</div><div class="line"></div><div class="line">        FloatingActionButton fab = (FloatingActionButton) findViewById(R.id.fab);</div><div class="line">        fab.setOnClickListener(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">        Button injectFirst = (Button) findViewById(R.id.inject_first_student);</div><div class="line">        injectFirst.setOnClickListener(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">        Button injectModule = (Button) findViewById(R.id.inject_with_module);</div><div class="line">        injectModule.setOnClickListener(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">        mShowContent = (TextView) findViewById(R.id.show_content);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> </span>&#123;</div><div class="line">        <span class="comment">// Inflate the menu; this adds items to the action bar if it is present.</span></div><div class="line">        getMenuInflater().inflate(R.menu.menu_scrolling, menu);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</div><div class="line">        <span class="comment">// Handle action bar item clicks here. The action bar will</span></div><div class="line">        <span class="comment">// automatically handle clicks on the Home/Up button, so long</span></div><div class="line">        <span class="comment">// as you specify a parent activity in AndroidManifest.xml.</span></div><div class="line">        <span class="keyword">int</span> id = item.getItemId();</div><div class="line"></div><div class="line">        <span class="comment">//noinspection SimplifiableIfStatement</span></div><div class="line">        <span class="keyword">if</span> (id == R.id.action_settings) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onOptionsItemSelected(item);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (v.getId()) &#123;</div><div class="line">            <span class="keyword">case</span> R.id.fab:</div><div class="line">                Snackbar.make(v, <span class="string">"dagger2"</span>, Snackbar.LENGTH_LONG)</div><div class="line">                        .setAction(<span class="string">"Action"</span>, <span class="keyword">null</span>).show();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.inject_first_student:</div><div class="line">                mShowContent.setText(<span class="string">""</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.inject_with_module:</div><div class="line">                mShowContent.setText(mGsonTestStudent.toString()+<span class="string">"///"</span>+mFirstStudent.toString());</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="注意-由于之前是通过注解的方式进行的依赖，所以FirstComponent中还保留着以下代码，会出bug-这个bug要注意。所以把代码注释掉。"><a href="#注意-由于之前是通过注解的方式进行的依赖，所以FirstComponent中还保留着以下代码，会出bug-这个bug要注意。所以把代码注释掉。" class="headerlink" title="注意:由于之前是通过注解的方式进行的依赖，所以FirstComponent中还保留着以下代码，会出bug,这个bug要注意。所以把代码注释掉。"></a>注意:由于之前是通过注解的方式进行的依赖，所以FirstComponent中还保留着以下代码，会出bug,这个bug要注意。所以把代码注释掉。</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span>()</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FirstComponent</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 注意一个类不能同时被两个component注入，因为这些东西是在编译的时候生成的，那么在编译的时候，你一个类同时</div><div class="line">     * 被两个component注入，那目标类会不知道去哪个component里面找，于是就去第一个找，结果找不到，于是就会</div><div class="line">     * 报错。</div><div class="line">     */</div><div class="line">   <span class="comment">/* void injectScrollingActivity(ScrollingActivity activity);*/</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>####一个需要注意的细节。</p>
<blockquote>
<p>创建类实例有2个维度可以创建：</p>
</blockquote>
<p>1 通过用Inject注解标注的构造函数来创建（以下简称Inject维度）<br><br>2 通过工厂模式的Module来创建（以下简称Module维度）<br></p>
<blockquote>
<p>这2个维度是有优先级之分的，Component会首先从Module维度中查找类实例，若找到就用Module维度创建类实例，并停止查找Inject维度。否则才是从Inject维度查找类实例。所以创建类实例级别Module维度要高于Inject维度。</p>
</blockquote>
<h4 id="第一篇先写这些，第二篇会接着介绍其他的注解以及其含义。"><a href="#第一篇先写这些，第二篇会接着介绍其他的注解以及其含义。" class="headerlink" title="第一篇先写这些，第二篇会接着介绍其他的注解以及其含义。"></a>第一篇先写这些，第二篇会接着介绍其他的注解以及其含义。</h4>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;dagger2-简介&quot;&gt;&lt;a href=&quot;#dagger2-简介&quot; class=&quot;headerlink&quot; title=&quot;dagger2 简介&quot;&gt;&lt;/a&gt;dagger2 简介&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;dagger2 是一个依赖注入框架，能够使项目更加
    
    </summary>
    
      <category term="第三方框架使用" scheme="http://yoursite.com/categories/%E7%AC%AC%E4%B8%89%E6%96%B9%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/"/>
    
    
      <category term="dagger2" scheme="http://yoursite.com/tags/dagger2/"/>
    
  </entry>
  
  <entry>
    <title>AppBarLayout的五种ScrollFlags</title>
    <link href="http://yoursite.com/2017/01/21/android_five_scrollFlags/"/>
    <id>http://yoursite.com/2017/01/21/android_five_scrollFlags/</id>
    <published>2017-01-21T04:15:58.000Z</published>
    <updated>2017-02-05T10:28:58.872Z</updated>
    
    <content type="html"><![CDATA[<h2 id="AppBarLayout的五种ScrollFlags。"><a href="#AppBarLayout的五种ScrollFlags。" class="headerlink" title="AppBarLayout的五种ScrollFlags。"></a>AppBarLayout的五种ScrollFlags。</h2><blockquote>
<p>ScrollFlags共有五种常量值供AppBarLayout的Children View使用，在xml布局文件中通过app:layout_scrollFlags设置，对应的值为：scroll，enterAlways，enterAlwaysCollapsed，snap，exitUntilCollapsed；</p>
</blockquote>
<h3 id="先上代码。"><a href="#先上代码。" class="headerlink" title="先上代码。"></a>先上代码。</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.CoordinatorLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.hhly.collapesingdemo.ScrollingActivity"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.AppBarLayout</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/app_bar"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"@dimen/app_bar_height"</span></div><div class="line">        <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme.AppBarOverlay"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">android.support.design.widget.CollapsingToolbarLayout</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/toolbar_layout"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:minHeight</span>=<span class="string">"30dp"</span></div><div class="line">            <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span></div><div class="line">            <span class="attr">app:contentScrim</span>=<span class="string">"?attr/colorPrimary"</span></div><div class="line">            <span class="attr">app:layout_scrollFlags</span>=<span class="string">"scroll"</span>&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/toolbar"</span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span></div><div class="line">                <span class="attr">app:layout_collapseMode</span>=<span class="string">"pin"</span></div><div class="line">                <span class="attr">app:popupTheme</span>=<span class="string">"@style/AppTheme.PopupOverlay"</span>/&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;/<span class="name">android.support.design.widget.CollapsingToolbarLayout</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">android.support.design.widget.AppBarLayout</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">"@layout/content_scrolling"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.FloatingActionButton</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/fab"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_margin</span>=<span class="string">"@dimen/fab_margin"</span></div><div class="line">        <span class="attr">app:layout_anchor</span>=<span class="string">"@id/app_bar"</span></div><div class="line">        <span class="attr">app:layout_anchorGravity</span>=<span class="string">"bottom|end"</span></div><div class="line">        <span class="attr">app:srcCompat</span>=<span class="string">"@android:drawable/ic_dialog_email"</span>/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">android.support.design.widget.CoordinatorLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="scroll"><a href="#scroll" class="headerlink" title="scroll"></a>scroll</h3><blockquote>
<p>Child View 伴随着滚动事件而滚出或滚进屏幕。注意两点：第一点，如果使用了其他值，必定要使用这个值才能起作用；第二点：如果在这个child View前面的任何其他Child View没有设置这个值，那么这个Child View的设置将失去作用。</p>
</blockquote>
<h3 id="enterAlways"><a href="#enterAlways" class="headerlink" title="enterAlways"></a>enterAlways</h3><blockquote>
<p>快速返回模式。其实就是向下滚动时Scrolling View和Child View之间的滚动优先级问题。对比scroll和scroll | enterAlways设置，发生向下滚动事件时，前者优先滚动Scrolling View，后者优先滚动Child View，当优先滚动的一方已经全部滚进屏幕之后，另一方才开始滚动。</p>
</blockquote>
<h3 id="enterAlwaysCollapsed"><a href="#enterAlwaysCollapsed" class="headerlink" title="enterAlwaysCollapsed"></a>enterAlwaysCollapsed</h3><blockquote>
<p>enterAlways的附加值。这里涉及到Child View的高度和最小高度，向下滚动时，Child View先向下滚动最小高度值，然后Scrolling View开始滚动，到达边界时，Child View再向下滚动，直至显示完全。</p>
</blockquote>
<p>示例代码：</p>
<pre><code>
...
android:layout_height="@dimen/dp_200"
android:minHeight="@dimen/dp_56"
...
app:layout_scrollFlags="scroll|enterAlways|enterAlwaysCollapsed"
...
</code></pre>


<h3 id="exitUntilCollapsed"><a href="#exitUntilCollapsed" class="headerlink" title="exitUntilCollapsed"></a>exitUntilCollapsed</h3><blockquote>
<p>这里也涉及到最小高度。发生向上滚动事件时，Child View向上滚动退出直至最小高度，然后Scrolling View开始滚动。也就是，Child View不会完全退出屏幕。</p>
<pre><code>
...
android:layout_height="@dimen/dp_200"
android:minHeight="@dimen/dp_56"
...
app:layout_scrollFlags="scroll|exitUntilCollapsed"
...
</code></pre>

</blockquote>
<h3 id="snap"><a href="#snap" class="headerlink" title="snap"></a>snap</h3><blockquote>
<p>就是Child View滚动比例的一个吸附效果。也就是说，Child View不会存在局部显示的情况，滚动Child View的部分高度，当我们松开手指时，Child View要么向上全部滚出屏幕，要么向下全部滚进屏幕，有点类似ViewPager的左右滑动。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;AppBarLayout的五种ScrollFlags。&quot;&gt;&lt;a href=&quot;#AppBarLayout的五种ScrollFlags。&quot; class=&quot;headerlink&quot; title=&quot;AppBarLayout的五种ScrollFlags。&quot;&gt;&lt;/a&gt;AppBa
    
    </summary>
    
      <category term="android5.0" scheme="http://yoursite.com/categories/android5-0/"/>
    
    
      <category term="android5.0" scheme="http://yoursite.com/tags/android5-0/"/>
    
  </entry>
  
</feed>
